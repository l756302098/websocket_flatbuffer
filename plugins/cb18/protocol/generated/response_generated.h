// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSE_SWR_H_
#define FLATBUFFERS_GENERATED_RESPONSE_SWR_H_

#include "flatbuffers/flatbuffers.h"

#include "public_generated.h"
#include "request_generated.h"

namespace swr {

struct ResponseNone;
struct ResponseNoneBuilder;

struct ResponseCleanMode;
struct ResponseCleanModeBuilder;

struct ResponseTeachClean;
struct ResponseTeachCleanBuilder;

struct ResponseAutoClean;
struct ResponseAutoCleanBuilder;

struct ResponseModemConfig;
struct ResponseModemConfigBuilder;

struct ResponseAboutThisMachine;
struct ResponseAboutThisMachineBuilder;

struct ResponseOperationRecord;
struct ResponseOperationRecordBuilder;

struct ResponseEquipmentStatus;
struct ResponseEquipmentStatusBuilder;

struct ResponseSiteRoutes;
struct ResponseSiteRoutesBuilder;

struct ResponseDelRoute;
struct ResponseDelRouteBuilder;

struct ResponseMachineParams;
struct ResponseMachineParamsBuilder;

struct ResponseEquipmentTesting;
struct ResponseEquipmentTestingBuilder;

struct ResponseFaultSetting;
struct ResponseFaultSettingBuilder;

struct ResponseWorkingMode;
struct ResponseWorkingModeBuilder;

struct ResponseWorkingHours;
struct ResponseWorkingHoursBuilder;

struct ResponseSiteCode;
struct ResponseSiteCodeBuilder;

struct ResponseSavingPower;
struct ResponseSavingPowerBuilder;

struct ResponseStandby;
struct ResponseStandbyBuilder;

struct ResponseExitStandby;
struct ResponseExitStandbyBuilder;

struct ResponseGetVolume;
struct ResponseGetVolumeBuilder;

struct ResponseGetBright;
struct ResponseGetBrightBuilder;

struct ResponseGetVcuData;
struct ResponseGetVcuDataBuilder;

struct ResponseTestConsumables;
struct ResponseTestConsumablesBuilder;

struct ResponseLockState;
struct ResponseLockStateBuilder;

struct ResponseLogin;
struct ResponseLoginBuilder;

struct ResponseUpdatePwd;
struct ResponseUpdatePwdBuilder;

struct ResponseUserList;
struct ResponseUserListBuilder;

struct Response;
struct ResponseBuilder;

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
enum ResponseDataField {
  ResponseDataField_NONE = 0,
  ResponseDataField_ResponseNone = 1,
  ResponseDataField_RequestSelfTest = 2,
  ResponseDataField_RequestCleanMode = 3,
  ResponseDataField_RequestManual = 4,
  ResponseDataField_RequestVideo = 5,
  ResponseDataField_RequestScanQR = 6,
  ResponseDataField_ResponseTeachClean = 7,
  ResponseDataField_ResponseAutoClean = 8,
  ResponseDataField_ResponseAboutThisMachine = 9,
  ResponseDataField_ResponseOperationRecord = 10,
  ResponseDataField_ResponseEquipmentStatus = 11,
  ResponseDataField_ResponseSiteRoutes = 12,
  ResponseDataField_RequestDelRoute = 13,
  ResponseDataField_RequestTransSlot = 14,
  ResponseDataField_RequestDownloadRoute = 15,
  ResponseDataField_RequestVerifyPassword = 16,
  ResponseDataField_ResponseMachineParams = 17,
  ResponseDataField_ResponseEquipmentTesting = 18,
  ResponseDataField_RequestEquipmentTestingItem = 19,
  ResponseDataField_ResponseFaultSetting = 20,
  ResponseDataField_ResponseWorkingMode = 21,
  ResponseDataField_ResponseWorkingHours = 22,
  ResponseDataField_RequestChangePassword = 23,
  ResponseDataField_ResponseSiteCode = 24,
  ResponseDataField_ResponseSavingPower = 25,
  ResponseDataField_ResponseStandby = 26,
  ResponseDataField_ResponseGetVolume = 27,
  ResponseDataField_ResponseGetBright = 28,
  ResponseDataField_ResponseGetVcuData = 29,
  ResponseDataField_ResponseTestConsumables = 30,
  ResponseDataField_ResponseExitStandby = 31,
  ResponseDataField_ResponseLockState = 32,
  ResponseDataField_ResponseLogin = 33,
  ResponseDataField_ResponseUpdatePwd = 34,
  ResponseDataField_ResponseUserList = 35,
  ResponseDataField_MIN = ResponseDataField_NONE,
  ResponseDataField_MAX = ResponseDataField_ResponseUserList
};

inline const ResponseDataField (&EnumValuesResponseDataField())[36] {
  static const ResponseDataField values[] = {
    ResponseDataField_NONE,
    ResponseDataField_ResponseNone,
    ResponseDataField_RequestSelfTest,
    ResponseDataField_RequestCleanMode,
    ResponseDataField_RequestManual,
    ResponseDataField_RequestVideo,
    ResponseDataField_RequestScanQR,
    ResponseDataField_ResponseTeachClean,
    ResponseDataField_ResponseAutoClean,
    ResponseDataField_ResponseAboutThisMachine,
    ResponseDataField_ResponseOperationRecord,
    ResponseDataField_ResponseEquipmentStatus,
    ResponseDataField_ResponseSiteRoutes,
    ResponseDataField_RequestDelRoute,
    ResponseDataField_RequestTransSlot,
    ResponseDataField_RequestDownloadRoute,
    ResponseDataField_RequestVerifyPassword,
    ResponseDataField_ResponseMachineParams,
    ResponseDataField_ResponseEquipmentTesting,
    ResponseDataField_RequestEquipmentTestingItem,
    ResponseDataField_ResponseFaultSetting,
    ResponseDataField_ResponseWorkingMode,
    ResponseDataField_ResponseWorkingHours,
    ResponseDataField_RequestChangePassword,
    ResponseDataField_ResponseSiteCode,
    ResponseDataField_ResponseSavingPower,
    ResponseDataField_ResponseStandby,
    ResponseDataField_ResponseGetVolume,
    ResponseDataField_ResponseGetBright,
    ResponseDataField_ResponseGetVcuData,
    ResponseDataField_ResponseTestConsumables,
    ResponseDataField_ResponseExitStandby,
    ResponseDataField_ResponseLockState,
    ResponseDataField_ResponseLogin,
    ResponseDataField_ResponseUpdatePwd,
    ResponseDataField_ResponseUserList
  };
  return values;
}

inline const char * const *EnumNamesResponseDataField() {
  static const char * const names[37] = {
    "NONE",
    "ResponseNone",
    "RequestSelfTest",
    "RequestCleanMode",
    "RequestManual",
    "RequestVideo",
    "RequestScanQR",
    "ResponseTeachClean",
    "ResponseAutoClean",
    "ResponseAboutThisMachine",
    "ResponseOperationRecord",
    "ResponseEquipmentStatus",
    "ResponseSiteRoutes",
    "RequestDelRoute",
    "RequestTransSlot",
    "RequestDownloadRoute",
    "RequestVerifyPassword",
    "ResponseMachineParams",
    "ResponseEquipmentTesting",
    "RequestEquipmentTestingItem",
    "ResponseFaultSetting",
    "ResponseWorkingMode",
    "ResponseWorkingHours",
    "RequestChangePassword",
    "ResponseSiteCode",
    "ResponseSavingPower",
    "ResponseStandby",
    "ResponseGetVolume",
    "ResponseGetBright",
    "ResponseGetVcuData",
    "ResponseTestConsumables",
    "ResponseExitStandby",
    "ResponseLockState",
    "ResponseLogin",
    "ResponseUpdatePwd",
    "ResponseUserList",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponseDataField(ResponseDataField e) {
  if (flatbuffers::IsOutRange(e, ResponseDataField_NONE, ResponseDataField_ResponseUserList)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResponseDataField()[index];
}

template<typename T> struct ResponseDataFieldTraits {
  static const ResponseDataField enum_value = ResponseDataField_NONE;
};

template<> struct ResponseDataFieldTraits<swr::ResponseNone> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseNone;
};

template<> struct ResponseDataFieldTraits<swr::RequestSelfTest> {
  static const ResponseDataField enum_value = ResponseDataField_RequestSelfTest;
};

template<> struct ResponseDataFieldTraits<swr::RequestCleanMode> {
  static const ResponseDataField enum_value = ResponseDataField_RequestCleanMode;
};

template<> struct ResponseDataFieldTraits<swr::RequestManual> {
  static const ResponseDataField enum_value = ResponseDataField_RequestManual;
};

template<> struct ResponseDataFieldTraits<swr::RequestVideo> {
  static const ResponseDataField enum_value = ResponseDataField_RequestVideo;
};

template<> struct ResponseDataFieldTraits<swr::RequestScanQR> {
  static const ResponseDataField enum_value = ResponseDataField_RequestScanQR;
};

template<> struct ResponseDataFieldTraits<swr::ResponseTeachClean> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseTeachClean;
};

template<> struct ResponseDataFieldTraits<swr::ResponseAutoClean> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseAutoClean;
};

template<> struct ResponseDataFieldTraits<swr::ResponseAboutThisMachine> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseAboutThisMachine;
};

template<> struct ResponseDataFieldTraits<swr::ResponseOperationRecord> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseOperationRecord;
};

template<> struct ResponseDataFieldTraits<swr::ResponseEquipmentStatus> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseEquipmentStatus;
};

template<> struct ResponseDataFieldTraits<swr::ResponseSiteRoutes> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseSiteRoutes;
};

template<> struct ResponseDataFieldTraits<swr::RequestDelRoute> {
  static const ResponseDataField enum_value = ResponseDataField_RequestDelRoute;
};

template<> struct ResponseDataFieldTraits<swr::RequestTransSlot> {
  static const ResponseDataField enum_value = ResponseDataField_RequestTransSlot;
};

template<> struct ResponseDataFieldTraits<swr::RequestDownloadRoute> {
  static const ResponseDataField enum_value = ResponseDataField_RequestDownloadRoute;
};

template<> struct ResponseDataFieldTraits<swr::RequestVerifyPassword> {
  static const ResponseDataField enum_value = ResponseDataField_RequestVerifyPassword;
};

template<> struct ResponseDataFieldTraits<swr::ResponseMachineParams> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseMachineParams;
};

template<> struct ResponseDataFieldTraits<swr::ResponseEquipmentTesting> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseEquipmentTesting;
};

template<> struct ResponseDataFieldTraits<swr::RequestEquipmentTestingItem> {
  static const ResponseDataField enum_value = ResponseDataField_RequestEquipmentTestingItem;
};

template<> struct ResponseDataFieldTraits<swr::ResponseFaultSetting> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseFaultSetting;
};

template<> struct ResponseDataFieldTraits<swr::ResponseWorkingMode> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseWorkingMode;
};

template<> struct ResponseDataFieldTraits<swr::ResponseWorkingHours> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseWorkingHours;
};

template<> struct ResponseDataFieldTraits<swr::RequestChangePassword> {
  static const ResponseDataField enum_value = ResponseDataField_RequestChangePassword;
};

template<> struct ResponseDataFieldTraits<swr::ResponseSiteCode> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseSiteCode;
};

template<> struct ResponseDataFieldTraits<swr::ResponseSavingPower> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseSavingPower;
};

template<> struct ResponseDataFieldTraits<swr::ResponseStandby> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseStandby;
};

template<> struct ResponseDataFieldTraits<swr::ResponseGetVolume> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseGetVolume;
};

template<> struct ResponseDataFieldTraits<swr::ResponseGetBright> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseGetBright;
};

template<> struct ResponseDataFieldTraits<swr::ResponseGetVcuData> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseGetVcuData;
};

template<> struct ResponseDataFieldTraits<swr::ResponseTestConsumables> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseTestConsumables;
};

template<> struct ResponseDataFieldTraits<swr::ResponseExitStandby> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseExitStandby;
};

template<> struct ResponseDataFieldTraits<swr::ResponseLockState> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseLockState;
};

template<> struct ResponseDataFieldTraits<swr::ResponseLogin> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseLogin;
};

template<> struct ResponseDataFieldTraits<swr::ResponseUpdatePwd> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseUpdatePwd;
};

template<> struct ResponseDataFieldTraits<swr::ResponseUserList> {
  static const ResponseDataField enum_value = ResponseDataField_ResponseUserList;
};

bool VerifyResponseDataField(flatbuffers::Verifier &verifier, const void *obj, ResponseDataField type);
bool VerifyResponseDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
struct ResponseNone FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseNoneBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ResponseNoneBuilder {
  typedef ResponseNone Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ResponseNoneBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseNoneBuilder &operator=(const ResponseNoneBuilder &);
  flatbuffers::Offset<ResponseNone> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseNone>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseNone> CreateResponseNone(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ResponseNoneBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ResponseCleanMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseCleanModeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODE = 4
  };
  swr::CleanMode mode() const {
    return static_cast<swr::CleanMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct ResponseCleanModeBuilder {
  typedef ResponseCleanMode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(swr::CleanMode mode) {
    fbb_.AddElement<int8_t>(ResponseCleanMode::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  explicit ResponseCleanModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseCleanModeBuilder &operator=(const ResponseCleanModeBuilder &);
  flatbuffers::Offset<ResponseCleanMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseCleanMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseCleanMode> CreateResponseCleanMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanMode mode = swr::CleanMode_Economize) {
  ResponseCleanModeBuilder builder_(_fbb);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct ResponseTeachClean FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseTeachCleanBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_THUMBNAIL_PATH = 6
  };
  swr::CleanState state() const {
    return static_cast<swr::CleanState>(GetField<int8_t>(VT_STATE, 0));
  }
  const flatbuffers::String *thumbnail_path() const {
    return GetPointer<const flatbuffers::String *>(VT_THUMBNAIL_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_THUMBNAIL_PATH) &&
           verifier.VerifyString(thumbnail_path()) &&
           verifier.EndTable();
  }
};

struct ResponseTeachCleanBuilder {
  typedef ResponseTeachClean Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(swr::CleanState state) {
    fbb_.AddElement<int8_t>(ResponseTeachClean::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_thumbnail_path(flatbuffers::Offset<flatbuffers::String> thumbnail_path) {
    fbb_.AddOffset(ResponseTeachClean::VT_THUMBNAIL_PATH, thumbnail_path);
  }
  explicit ResponseTeachCleanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseTeachCleanBuilder &operator=(const ResponseTeachCleanBuilder &);
  flatbuffers::Offset<ResponseTeachClean> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseTeachClean>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseTeachClean> CreateResponseTeachClean(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanState state = swr::CleanState_Start,
    flatbuffers::Offset<flatbuffers::String> thumbnail_path = 0) {
  ResponseTeachCleanBuilder builder_(_fbb);
  builder_.add_thumbnail_path(thumbnail_path);
  builder_.add_state(state);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseTeachClean> CreateResponseTeachCleanDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanState state = swr::CleanState_Start,
    const char *thumbnail_path = nullptr) {
  auto thumbnail_path__ = thumbnail_path ? _fbb.CreateString(thumbnail_path) : 0;
  return swr::CreateResponseTeachClean(
      _fbb,
      state,
      thumbnail_path__);
}

struct ResponseAutoClean FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseAutoCleanBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_UPDATE_THUMBNAIL = 6,
    VT_RUN_PATH = 8
  };
  swr::CleanState state() const {
    return static_cast<swr::CleanState>(GetField<int8_t>(VT_STATE, 0));
  }
  bool update_thumbnail() const {
    return GetField<uint8_t>(VT_UPDATE_THUMBNAIL, 0) != 0;
  }
  const flatbuffers::String *run_path() const {
    return GetPointer<const flatbuffers::String *>(VT_RUN_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyField<uint8_t>(verifier, VT_UPDATE_THUMBNAIL) &&
           VerifyOffset(verifier, VT_RUN_PATH) &&
           verifier.VerifyString(run_path()) &&
           verifier.EndTable();
  }
};

struct ResponseAutoCleanBuilder {
  typedef ResponseAutoClean Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(swr::CleanState state) {
    fbb_.AddElement<int8_t>(ResponseAutoClean::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_update_thumbnail(bool update_thumbnail) {
    fbb_.AddElement<uint8_t>(ResponseAutoClean::VT_UPDATE_THUMBNAIL, static_cast<uint8_t>(update_thumbnail), 0);
  }
  void add_run_path(flatbuffers::Offset<flatbuffers::String> run_path) {
    fbb_.AddOffset(ResponseAutoClean::VT_RUN_PATH, run_path);
  }
  explicit ResponseAutoCleanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseAutoCleanBuilder &operator=(const ResponseAutoCleanBuilder &);
  flatbuffers::Offset<ResponseAutoClean> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseAutoClean>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseAutoClean> CreateResponseAutoClean(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanState state = swr::CleanState_Start,
    bool update_thumbnail = false,
    flatbuffers::Offset<flatbuffers::String> run_path = 0) {
  ResponseAutoCleanBuilder builder_(_fbb);
  builder_.add_run_path(run_path);
  builder_.add_update_thumbnail(update_thumbnail);
  builder_.add_state(state);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseAutoClean> CreateResponseAutoCleanDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanState state = swr::CleanState_Start,
    bool update_thumbnail = false,
    const char *run_path = nullptr) {
  auto run_path__ = run_path ? _fbb.CreateString(run_path) : 0;
  return swr::CreateResponseAutoClean(
      _fbb,
      state,
      update_thumbnail,
      run_path__);
}

struct ResponseModemConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseModemConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORK_TIME_LIMIT = 4,
    VT_START_TIME = 6,
    VT_END_TIME = 8,
    VT_TIMEZONE = 10,
    VT_BODY_NUM2 = 12,
    VT_MACHINE_NAME = 14,
    VT_HMI_ADMIN_PWD = 16,
    VT_SITE_CODE = 18,
    VT_LOCATION_NAME = 20,
    VT_FLOOR_NAME = 22,
    VT_SITE_NAME = 24,
    VT_TOTAL_WORK_TIME = 26,
    VT_TOTAL_PULSE_COUNT = 28,
    VT_TOTAL_RUN_LENGTH = 30,
    VT_TOTAL_CLEANED_AREA = 32,
    VT_UNDEDUP_CLEANED_AREA = 34
  };
  /// Machine
  int32_t work_time_limit() const {
    return GetField<int32_t>(VT_WORK_TIME_LIMIT, 0);
  }
  int32_t start_time() const {
    return GetField<int32_t>(VT_START_TIME, 0);
  }
  int32_t end_time() const {
    return GetField<int32_t>(VT_END_TIME, 0);
  }
  const flatbuffers::String *timezone() const {
    return GetPointer<const flatbuffers::String *>(VT_TIMEZONE);
  }
  int32_t body_num2() const {
    return GetField<int32_t>(VT_BODY_NUM2, 0);
  }
  const flatbuffers::String *machine_name() const {
    return GetPointer<const flatbuffers::String *>(VT_MACHINE_NAME);
  }
  const flatbuffers::String *hmi_admin_pwd() const {
    return GetPointer<const flatbuffers::String *>(VT_HMI_ADMIN_PWD);
  }
  /// SiteInfo
  const flatbuffers::String *site_code() const {
    return GetPointer<const flatbuffers::String *>(VT_SITE_CODE);
  }
  const flatbuffers::String *location_name() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCATION_NAME);
  }
  const flatbuffers::String *floor_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FLOOR_NAME);
  }
  const flatbuffers::String *site_name() const {
    return GetPointer<const flatbuffers::String *>(VT_SITE_NAME);
  }
  /// VCUData
  int32_t total_work_time() const {
    return GetField<int32_t>(VT_TOTAL_WORK_TIME, 0);
  }
  int32_t total_pulse_count() const {
    return GetField<int32_t>(VT_TOTAL_PULSE_COUNT, 0);
  }
  int32_t total_run_length() const {
    return GetField<int32_t>(VT_TOTAL_RUN_LENGTH, 0);
  }
  int32_t total_cleaned_area() const {
    return GetField<int32_t>(VT_TOTAL_CLEANED_AREA, 0);
  }
  int32_t undedup_cleaned_area() const {
    return GetField<int32_t>(VT_UNDEDUP_CLEANED_AREA, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WORK_TIME_LIMIT) &&
           VerifyField<int32_t>(verifier, VT_START_TIME) &&
           VerifyField<int32_t>(verifier, VT_END_TIME) &&
           VerifyOffset(verifier, VT_TIMEZONE) &&
           verifier.VerifyString(timezone()) &&
           VerifyField<int32_t>(verifier, VT_BODY_NUM2) &&
           VerifyOffset(verifier, VT_MACHINE_NAME) &&
           verifier.VerifyString(machine_name()) &&
           VerifyOffset(verifier, VT_HMI_ADMIN_PWD) &&
           verifier.VerifyString(hmi_admin_pwd()) &&
           VerifyOffset(verifier, VT_SITE_CODE) &&
           verifier.VerifyString(site_code()) &&
           VerifyOffset(verifier, VT_LOCATION_NAME) &&
           verifier.VerifyString(location_name()) &&
           VerifyOffset(verifier, VT_FLOOR_NAME) &&
           verifier.VerifyString(floor_name()) &&
           VerifyOffset(verifier, VT_SITE_NAME) &&
           verifier.VerifyString(site_name()) &&
           VerifyField<int32_t>(verifier, VT_TOTAL_WORK_TIME) &&
           VerifyField<int32_t>(verifier, VT_TOTAL_PULSE_COUNT) &&
           VerifyField<int32_t>(verifier, VT_TOTAL_RUN_LENGTH) &&
           VerifyField<int32_t>(verifier, VT_TOTAL_CLEANED_AREA) &&
           VerifyField<int32_t>(verifier, VT_UNDEDUP_CLEANED_AREA) &&
           verifier.EndTable();
  }
};

struct ResponseModemConfigBuilder {
  typedef ResponseModemConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_work_time_limit(int32_t work_time_limit) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_WORK_TIME_LIMIT, work_time_limit, 0);
  }
  void add_start_time(int32_t start_time) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_START_TIME, start_time, 0);
  }
  void add_end_time(int32_t end_time) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_END_TIME, end_time, 0);
  }
  void add_timezone(flatbuffers::Offset<flatbuffers::String> timezone) {
    fbb_.AddOffset(ResponseModemConfig::VT_TIMEZONE, timezone);
  }
  void add_body_num2(int32_t body_num2) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_BODY_NUM2, body_num2, 0);
  }
  void add_machine_name(flatbuffers::Offset<flatbuffers::String> machine_name) {
    fbb_.AddOffset(ResponseModemConfig::VT_MACHINE_NAME, machine_name);
  }
  void add_hmi_admin_pwd(flatbuffers::Offset<flatbuffers::String> hmi_admin_pwd) {
    fbb_.AddOffset(ResponseModemConfig::VT_HMI_ADMIN_PWD, hmi_admin_pwd);
  }
  void add_site_code(flatbuffers::Offset<flatbuffers::String> site_code) {
    fbb_.AddOffset(ResponseModemConfig::VT_SITE_CODE, site_code);
  }
  void add_location_name(flatbuffers::Offset<flatbuffers::String> location_name) {
    fbb_.AddOffset(ResponseModemConfig::VT_LOCATION_NAME, location_name);
  }
  void add_floor_name(flatbuffers::Offset<flatbuffers::String> floor_name) {
    fbb_.AddOffset(ResponseModemConfig::VT_FLOOR_NAME, floor_name);
  }
  void add_site_name(flatbuffers::Offset<flatbuffers::String> site_name) {
    fbb_.AddOffset(ResponseModemConfig::VT_SITE_NAME, site_name);
  }
  void add_total_work_time(int32_t total_work_time) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_TOTAL_WORK_TIME, total_work_time, 0);
  }
  void add_total_pulse_count(int32_t total_pulse_count) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_TOTAL_PULSE_COUNT, total_pulse_count, 0);
  }
  void add_total_run_length(int32_t total_run_length) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_TOTAL_RUN_LENGTH, total_run_length, 0);
  }
  void add_total_cleaned_area(int32_t total_cleaned_area) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_TOTAL_CLEANED_AREA, total_cleaned_area, 0);
  }
  void add_undedup_cleaned_area(int32_t undedup_cleaned_area) {
    fbb_.AddElement<int32_t>(ResponseModemConfig::VT_UNDEDUP_CLEANED_AREA, undedup_cleaned_area, 0);
  }
  explicit ResponseModemConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseModemConfigBuilder &operator=(const ResponseModemConfigBuilder &);
  flatbuffers::Offset<ResponseModemConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseModemConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseModemConfig> CreateResponseModemConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t work_time_limit = 0,
    int32_t start_time = 0,
    int32_t end_time = 0,
    flatbuffers::Offset<flatbuffers::String> timezone = 0,
    int32_t body_num2 = 0,
    flatbuffers::Offset<flatbuffers::String> machine_name = 0,
    flatbuffers::Offset<flatbuffers::String> hmi_admin_pwd = 0,
    flatbuffers::Offset<flatbuffers::String> site_code = 0,
    flatbuffers::Offset<flatbuffers::String> location_name = 0,
    flatbuffers::Offset<flatbuffers::String> floor_name = 0,
    flatbuffers::Offset<flatbuffers::String> site_name = 0,
    int32_t total_work_time = 0,
    int32_t total_pulse_count = 0,
    int32_t total_run_length = 0,
    int32_t total_cleaned_area = 0,
    int32_t undedup_cleaned_area = 0) {
  ResponseModemConfigBuilder builder_(_fbb);
  builder_.add_undedup_cleaned_area(undedup_cleaned_area);
  builder_.add_total_cleaned_area(total_cleaned_area);
  builder_.add_total_run_length(total_run_length);
  builder_.add_total_pulse_count(total_pulse_count);
  builder_.add_total_work_time(total_work_time);
  builder_.add_site_name(site_name);
  builder_.add_floor_name(floor_name);
  builder_.add_location_name(location_name);
  builder_.add_site_code(site_code);
  builder_.add_hmi_admin_pwd(hmi_admin_pwd);
  builder_.add_machine_name(machine_name);
  builder_.add_body_num2(body_num2);
  builder_.add_timezone(timezone);
  builder_.add_end_time(end_time);
  builder_.add_start_time(start_time);
  builder_.add_work_time_limit(work_time_limit);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseModemConfig> CreateResponseModemConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t work_time_limit = 0,
    int32_t start_time = 0,
    int32_t end_time = 0,
    const char *timezone = nullptr,
    int32_t body_num2 = 0,
    const char *machine_name = nullptr,
    const char *hmi_admin_pwd = nullptr,
    const char *site_code = nullptr,
    const char *location_name = nullptr,
    const char *floor_name = nullptr,
    const char *site_name = nullptr,
    int32_t total_work_time = 0,
    int32_t total_pulse_count = 0,
    int32_t total_run_length = 0,
    int32_t total_cleaned_area = 0,
    int32_t undedup_cleaned_area = 0) {
  auto timezone__ = timezone ? _fbb.CreateString(timezone) : 0;
  auto machine_name__ = machine_name ? _fbb.CreateString(machine_name) : 0;
  auto hmi_admin_pwd__ = hmi_admin_pwd ? _fbb.CreateString(hmi_admin_pwd) : 0;
  auto site_code__ = site_code ? _fbb.CreateString(site_code) : 0;
  auto location_name__ = location_name ? _fbb.CreateString(location_name) : 0;
  auto floor_name__ = floor_name ? _fbb.CreateString(floor_name) : 0;
  auto site_name__ = site_name ? _fbb.CreateString(site_name) : 0;
  return swr::CreateResponseModemConfig(
      _fbb,
      work_time_limit,
      start_time,
      end_time,
      timezone__,
      body_num2,
      machine_name__,
      hmi_admin_pwd__,
      site_code__,
      location_name__,
      floor_name__,
      site_name__,
      total_work_time,
      total_pulse_count,
      total_run_length,
      total_cleaned_area,
      undedup_cleaned_area);
}

struct ResponseAboutThisMachine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseAboutThisMachineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODEL = 4,
    VT_FUSELAGE_NUMBER = 6,
    VT_EQUIPMENT_NAME = 8,
    VT_PROJECT_AREA = 10,
    VT_HMI_VERSION = 12,
    VT_MODEM_VERSION = 14,
    VT_VCU_VERSION = 16,
    VT_MCU_VERSION = 18,
    VT_NCU_VERSION = 20,
    VT_COPROCESSOR_VERSION = 22,
    VT_BATTERY_VERSION = 24,
    VT_HMI_SERIAL_NUMBER = 26,
    VT_MODEM_SERIAL_NUMBER = 28,
    VT_VCU_SERIAL_NUMBER = 30,
    VT_MCU_SERIAL_NUMBER = 32,
    VT_NCU_SERIAL_NUMBER = 34,
    VT_COPROCESSOR_SERIAL_NUMBER = 36,
    VT_BATTERY_SERIAL_NUMBER = 38,
    VT_IMSI = 40,
    VT_ICCID = 42,
    VT_WLAN_MAC = 44,
    VT_IMSEE_PN = 46,
    VT_IMSEE_SN = 48,
    VT_TOF_PN = 50,
    VT_TOF_SN = 52,
    VT_LASER_FIRMWARE_VERSION = 54,
    VT_LASER_SN = 56,
    VT_LOCATION_NAME = 58,
    VT_PRODUCT_SN = 60
  };
  const flatbuffers::String *model() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEL);
  }
  const flatbuffers::String *fuselage_number() const {
    return GetPointer<const flatbuffers::String *>(VT_FUSELAGE_NUMBER);
  }
  const flatbuffers::String *equipment_name() const {
    return GetPointer<const flatbuffers::String *>(VT_EQUIPMENT_NAME);
  }
  const flatbuffers::String *project_area() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJECT_AREA);
  }
  const flatbuffers::String *hmi_version() const {
    return GetPointer<const flatbuffers::String *>(VT_HMI_VERSION);
  }
  const flatbuffers::String *modem_version() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEM_VERSION);
  }
  const flatbuffers::String *vcu_version() const {
    return GetPointer<const flatbuffers::String *>(VT_VCU_VERSION);
  }
  const flatbuffers::String *mcu_version() const {
    return GetPointer<const flatbuffers::String *>(VT_MCU_VERSION);
  }
  const flatbuffers::String *ncu_version() const {
    return GetPointer<const flatbuffers::String *>(VT_NCU_VERSION);
  }
  const flatbuffers::String *coprocessor_version() const {
    return GetPointer<const flatbuffers::String *>(VT_COPROCESSOR_VERSION);
  }
  const flatbuffers::String *battery_version() const {
    return GetPointer<const flatbuffers::String *>(VT_BATTERY_VERSION);
  }
  const flatbuffers::String *hmi_serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_HMI_SERIAL_NUMBER);
  }
  const flatbuffers::String *modem_serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEM_SERIAL_NUMBER);
  }
  const flatbuffers::String *vcu_serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_VCU_SERIAL_NUMBER);
  }
  const flatbuffers::String *mcu_serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_MCU_SERIAL_NUMBER);
  }
  const flatbuffers::String *ncu_serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_NCU_SERIAL_NUMBER);
  }
  const flatbuffers::String *coprocessor_serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_COPROCESSOR_SERIAL_NUMBER);
  }
  const flatbuffers::String *battery_serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_BATTERY_SERIAL_NUMBER);
  }
  const flatbuffers::String *imsi() const {
    return GetPointer<const flatbuffers::String *>(VT_IMSI);
  }
  const flatbuffers::String *iccid() const {
    return GetPointer<const flatbuffers::String *>(VT_ICCID);
  }
  const flatbuffers::String *wlan_mac() const {
    return GetPointer<const flatbuffers::String *>(VT_WLAN_MAC);
  }
  const flatbuffers::String *imsee_pn() const {
    return GetPointer<const flatbuffers::String *>(VT_IMSEE_PN);
  }
  const flatbuffers::String *imsee_sn() const {
    return GetPointer<const flatbuffers::String *>(VT_IMSEE_SN);
  }
  const flatbuffers::String *tof_pn() const {
    return GetPointer<const flatbuffers::String *>(VT_TOF_PN);
  }
  const flatbuffers::String *tof_sn() const {
    return GetPointer<const flatbuffers::String *>(VT_TOF_SN);
  }
  const flatbuffers::String *laser_firmware_version() const {
    return GetPointer<const flatbuffers::String *>(VT_LASER_FIRMWARE_VERSION);
  }
  const flatbuffers::String *laser_sn() const {
    return GetPointer<const flatbuffers::String *>(VT_LASER_SN);
  }
  const flatbuffers::String *location_name() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCATION_NAME);
  }
  const flatbuffers::String *product_sn() const {
    return GetPointer<const flatbuffers::String *>(VT_PRODUCT_SN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MODEL) &&
           verifier.VerifyString(model()) &&
           VerifyOffset(verifier, VT_FUSELAGE_NUMBER) &&
           verifier.VerifyString(fuselage_number()) &&
           VerifyOffset(verifier, VT_EQUIPMENT_NAME) &&
           verifier.VerifyString(equipment_name()) &&
           VerifyOffset(verifier, VT_PROJECT_AREA) &&
           verifier.VerifyString(project_area()) &&
           VerifyOffset(verifier, VT_HMI_VERSION) &&
           verifier.VerifyString(hmi_version()) &&
           VerifyOffset(verifier, VT_MODEM_VERSION) &&
           verifier.VerifyString(modem_version()) &&
           VerifyOffset(verifier, VT_VCU_VERSION) &&
           verifier.VerifyString(vcu_version()) &&
           VerifyOffset(verifier, VT_MCU_VERSION) &&
           verifier.VerifyString(mcu_version()) &&
           VerifyOffset(verifier, VT_NCU_VERSION) &&
           verifier.VerifyString(ncu_version()) &&
           VerifyOffset(verifier, VT_COPROCESSOR_VERSION) &&
           verifier.VerifyString(coprocessor_version()) &&
           VerifyOffset(verifier, VT_BATTERY_VERSION) &&
           verifier.VerifyString(battery_version()) &&
           VerifyOffset(verifier, VT_HMI_SERIAL_NUMBER) &&
           verifier.VerifyString(hmi_serial_number()) &&
           VerifyOffset(verifier, VT_MODEM_SERIAL_NUMBER) &&
           verifier.VerifyString(modem_serial_number()) &&
           VerifyOffset(verifier, VT_VCU_SERIAL_NUMBER) &&
           verifier.VerifyString(vcu_serial_number()) &&
           VerifyOffset(verifier, VT_MCU_SERIAL_NUMBER) &&
           verifier.VerifyString(mcu_serial_number()) &&
           VerifyOffset(verifier, VT_NCU_SERIAL_NUMBER) &&
           verifier.VerifyString(ncu_serial_number()) &&
           VerifyOffset(verifier, VT_COPROCESSOR_SERIAL_NUMBER) &&
           verifier.VerifyString(coprocessor_serial_number()) &&
           VerifyOffset(verifier, VT_BATTERY_SERIAL_NUMBER) &&
           verifier.VerifyString(battery_serial_number()) &&
           VerifyOffset(verifier, VT_IMSI) &&
           verifier.VerifyString(imsi()) &&
           VerifyOffset(verifier, VT_ICCID) &&
           verifier.VerifyString(iccid()) &&
           VerifyOffset(verifier, VT_WLAN_MAC) &&
           verifier.VerifyString(wlan_mac()) &&
           VerifyOffset(verifier, VT_IMSEE_PN) &&
           verifier.VerifyString(imsee_pn()) &&
           VerifyOffset(verifier, VT_IMSEE_SN) &&
           verifier.VerifyString(imsee_sn()) &&
           VerifyOffset(verifier, VT_TOF_PN) &&
           verifier.VerifyString(tof_pn()) &&
           VerifyOffset(verifier, VT_TOF_SN) &&
           verifier.VerifyString(tof_sn()) &&
           VerifyOffset(verifier, VT_LASER_FIRMWARE_VERSION) &&
           verifier.VerifyString(laser_firmware_version()) &&
           VerifyOffset(verifier, VT_LASER_SN) &&
           verifier.VerifyString(laser_sn()) &&
           VerifyOffset(verifier, VT_LOCATION_NAME) &&
           verifier.VerifyString(location_name()) &&
           VerifyOffset(verifier, VT_PRODUCT_SN) &&
           verifier.VerifyString(product_sn()) &&
           verifier.EndTable();
  }
};

struct ResponseAboutThisMachineBuilder {
  typedef ResponseAboutThisMachine Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_model(flatbuffers::Offset<flatbuffers::String> model) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_MODEL, model);
  }
  void add_fuselage_number(flatbuffers::Offset<flatbuffers::String> fuselage_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_FUSELAGE_NUMBER, fuselage_number);
  }
  void add_equipment_name(flatbuffers::Offset<flatbuffers::String> equipment_name) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_EQUIPMENT_NAME, equipment_name);
  }
  void add_project_area(flatbuffers::Offset<flatbuffers::String> project_area) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_PROJECT_AREA, project_area);
  }
  void add_hmi_version(flatbuffers::Offset<flatbuffers::String> hmi_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_HMI_VERSION, hmi_version);
  }
  void add_modem_version(flatbuffers::Offset<flatbuffers::String> modem_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_MODEM_VERSION, modem_version);
  }
  void add_vcu_version(flatbuffers::Offset<flatbuffers::String> vcu_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_VCU_VERSION, vcu_version);
  }
  void add_mcu_version(flatbuffers::Offset<flatbuffers::String> mcu_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_MCU_VERSION, mcu_version);
  }
  void add_ncu_version(flatbuffers::Offset<flatbuffers::String> ncu_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_NCU_VERSION, ncu_version);
  }
  void add_coprocessor_version(flatbuffers::Offset<flatbuffers::String> coprocessor_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_COPROCESSOR_VERSION, coprocessor_version);
  }
  void add_battery_version(flatbuffers::Offset<flatbuffers::String> battery_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_BATTERY_VERSION, battery_version);
  }
  void add_hmi_serial_number(flatbuffers::Offset<flatbuffers::String> hmi_serial_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_HMI_SERIAL_NUMBER, hmi_serial_number);
  }
  void add_modem_serial_number(flatbuffers::Offset<flatbuffers::String> modem_serial_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_MODEM_SERIAL_NUMBER, modem_serial_number);
  }
  void add_vcu_serial_number(flatbuffers::Offset<flatbuffers::String> vcu_serial_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_VCU_SERIAL_NUMBER, vcu_serial_number);
  }
  void add_mcu_serial_number(flatbuffers::Offset<flatbuffers::String> mcu_serial_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_MCU_SERIAL_NUMBER, mcu_serial_number);
  }
  void add_ncu_serial_number(flatbuffers::Offset<flatbuffers::String> ncu_serial_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_NCU_SERIAL_NUMBER, ncu_serial_number);
  }
  void add_coprocessor_serial_number(flatbuffers::Offset<flatbuffers::String> coprocessor_serial_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_COPROCESSOR_SERIAL_NUMBER, coprocessor_serial_number);
  }
  void add_battery_serial_number(flatbuffers::Offset<flatbuffers::String> battery_serial_number) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_BATTERY_SERIAL_NUMBER, battery_serial_number);
  }
  void add_imsi(flatbuffers::Offset<flatbuffers::String> imsi) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_IMSI, imsi);
  }
  void add_iccid(flatbuffers::Offset<flatbuffers::String> iccid) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_ICCID, iccid);
  }
  void add_wlan_mac(flatbuffers::Offset<flatbuffers::String> wlan_mac) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_WLAN_MAC, wlan_mac);
  }
  void add_imsee_pn(flatbuffers::Offset<flatbuffers::String> imsee_pn) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_IMSEE_PN, imsee_pn);
  }
  void add_imsee_sn(flatbuffers::Offset<flatbuffers::String> imsee_sn) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_IMSEE_SN, imsee_sn);
  }
  void add_tof_pn(flatbuffers::Offset<flatbuffers::String> tof_pn) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_TOF_PN, tof_pn);
  }
  void add_tof_sn(flatbuffers::Offset<flatbuffers::String> tof_sn) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_TOF_SN, tof_sn);
  }
  void add_laser_firmware_version(flatbuffers::Offset<flatbuffers::String> laser_firmware_version) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_LASER_FIRMWARE_VERSION, laser_firmware_version);
  }
  void add_laser_sn(flatbuffers::Offset<flatbuffers::String> laser_sn) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_LASER_SN, laser_sn);
  }
  void add_location_name(flatbuffers::Offset<flatbuffers::String> location_name) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_LOCATION_NAME, location_name);
  }
  void add_product_sn(flatbuffers::Offset<flatbuffers::String> product_sn) {
    fbb_.AddOffset(ResponseAboutThisMachine::VT_PRODUCT_SN, product_sn);
  }
  explicit ResponseAboutThisMachineBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseAboutThisMachineBuilder &operator=(const ResponseAboutThisMachineBuilder &);
  flatbuffers::Offset<ResponseAboutThisMachine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseAboutThisMachine>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseAboutThisMachine> CreateResponseAboutThisMachine(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> model = 0,
    flatbuffers::Offset<flatbuffers::String> fuselage_number = 0,
    flatbuffers::Offset<flatbuffers::String> equipment_name = 0,
    flatbuffers::Offset<flatbuffers::String> project_area = 0,
    flatbuffers::Offset<flatbuffers::String> hmi_version = 0,
    flatbuffers::Offset<flatbuffers::String> modem_version = 0,
    flatbuffers::Offset<flatbuffers::String> vcu_version = 0,
    flatbuffers::Offset<flatbuffers::String> mcu_version = 0,
    flatbuffers::Offset<flatbuffers::String> ncu_version = 0,
    flatbuffers::Offset<flatbuffers::String> coprocessor_version = 0,
    flatbuffers::Offset<flatbuffers::String> battery_version = 0,
    flatbuffers::Offset<flatbuffers::String> hmi_serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> modem_serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> vcu_serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> mcu_serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> ncu_serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> coprocessor_serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> battery_serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> imsi = 0,
    flatbuffers::Offset<flatbuffers::String> iccid = 0,
    flatbuffers::Offset<flatbuffers::String> wlan_mac = 0,
    flatbuffers::Offset<flatbuffers::String> imsee_pn = 0,
    flatbuffers::Offset<flatbuffers::String> imsee_sn = 0,
    flatbuffers::Offset<flatbuffers::String> tof_pn = 0,
    flatbuffers::Offset<flatbuffers::String> tof_sn = 0,
    flatbuffers::Offset<flatbuffers::String> laser_firmware_version = 0,
    flatbuffers::Offset<flatbuffers::String> laser_sn = 0,
    flatbuffers::Offset<flatbuffers::String> location_name = 0,
    flatbuffers::Offset<flatbuffers::String> product_sn = 0) {
  ResponseAboutThisMachineBuilder builder_(_fbb);
  builder_.add_product_sn(product_sn);
  builder_.add_location_name(location_name);
  builder_.add_laser_sn(laser_sn);
  builder_.add_laser_firmware_version(laser_firmware_version);
  builder_.add_tof_sn(tof_sn);
  builder_.add_tof_pn(tof_pn);
  builder_.add_imsee_sn(imsee_sn);
  builder_.add_imsee_pn(imsee_pn);
  builder_.add_wlan_mac(wlan_mac);
  builder_.add_iccid(iccid);
  builder_.add_imsi(imsi);
  builder_.add_battery_serial_number(battery_serial_number);
  builder_.add_coprocessor_serial_number(coprocessor_serial_number);
  builder_.add_ncu_serial_number(ncu_serial_number);
  builder_.add_mcu_serial_number(mcu_serial_number);
  builder_.add_vcu_serial_number(vcu_serial_number);
  builder_.add_modem_serial_number(modem_serial_number);
  builder_.add_hmi_serial_number(hmi_serial_number);
  builder_.add_battery_version(battery_version);
  builder_.add_coprocessor_version(coprocessor_version);
  builder_.add_ncu_version(ncu_version);
  builder_.add_mcu_version(mcu_version);
  builder_.add_vcu_version(vcu_version);
  builder_.add_modem_version(modem_version);
  builder_.add_hmi_version(hmi_version);
  builder_.add_project_area(project_area);
  builder_.add_equipment_name(equipment_name);
  builder_.add_fuselage_number(fuselage_number);
  builder_.add_model(model);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseAboutThisMachine> CreateResponseAboutThisMachineDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *model = nullptr,
    const char *fuselage_number = nullptr,
    const char *equipment_name = nullptr,
    const char *project_area = nullptr,
    const char *hmi_version = nullptr,
    const char *modem_version = nullptr,
    const char *vcu_version = nullptr,
    const char *mcu_version = nullptr,
    const char *ncu_version = nullptr,
    const char *coprocessor_version = nullptr,
    const char *battery_version = nullptr,
    const char *hmi_serial_number = nullptr,
    const char *modem_serial_number = nullptr,
    const char *vcu_serial_number = nullptr,
    const char *mcu_serial_number = nullptr,
    const char *ncu_serial_number = nullptr,
    const char *coprocessor_serial_number = nullptr,
    const char *battery_serial_number = nullptr,
    const char *imsi = nullptr,
    const char *iccid = nullptr,
    const char *wlan_mac = nullptr,
    const char *imsee_pn = nullptr,
    const char *imsee_sn = nullptr,
    const char *tof_pn = nullptr,
    const char *tof_sn = nullptr,
    const char *laser_firmware_version = nullptr,
    const char *laser_sn = nullptr,
    const char *location_name = nullptr,
    const char *product_sn = nullptr) {
  auto model__ = model ? _fbb.CreateString(model) : 0;
  auto fuselage_number__ = fuselage_number ? _fbb.CreateString(fuselage_number) : 0;
  auto equipment_name__ = equipment_name ? _fbb.CreateString(equipment_name) : 0;
  auto project_area__ = project_area ? _fbb.CreateString(project_area) : 0;
  auto hmi_version__ = hmi_version ? _fbb.CreateString(hmi_version) : 0;
  auto modem_version__ = modem_version ? _fbb.CreateString(modem_version) : 0;
  auto vcu_version__ = vcu_version ? _fbb.CreateString(vcu_version) : 0;
  auto mcu_version__ = mcu_version ? _fbb.CreateString(mcu_version) : 0;
  auto ncu_version__ = ncu_version ? _fbb.CreateString(ncu_version) : 0;
  auto coprocessor_version__ = coprocessor_version ? _fbb.CreateString(coprocessor_version) : 0;
  auto battery_version__ = battery_version ? _fbb.CreateString(battery_version) : 0;
  auto hmi_serial_number__ = hmi_serial_number ? _fbb.CreateString(hmi_serial_number) : 0;
  auto modem_serial_number__ = modem_serial_number ? _fbb.CreateString(modem_serial_number) : 0;
  auto vcu_serial_number__ = vcu_serial_number ? _fbb.CreateString(vcu_serial_number) : 0;
  auto mcu_serial_number__ = mcu_serial_number ? _fbb.CreateString(mcu_serial_number) : 0;
  auto ncu_serial_number__ = ncu_serial_number ? _fbb.CreateString(ncu_serial_number) : 0;
  auto coprocessor_serial_number__ = coprocessor_serial_number ? _fbb.CreateString(coprocessor_serial_number) : 0;
  auto battery_serial_number__ = battery_serial_number ? _fbb.CreateString(battery_serial_number) : 0;
  auto imsi__ = imsi ? _fbb.CreateString(imsi) : 0;
  auto iccid__ = iccid ? _fbb.CreateString(iccid) : 0;
  auto wlan_mac__ = wlan_mac ? _fbb.CreateString(wlan_mac) : 0;
  auto imsee_pn__ = imsee_pn ? _fbb.CreateString(imsee_pn) : 0;
  auto imsee_sn__ = imsee_sn ? _fbb.CreateString(imsee_sn) : 0;
  auto tof_pn__ = tof_pn ? _fbb.CreateString(tof_pn) : 0;
  auto tof_sn__ = tof_sn ? _fbb.CreateString(tof_sn) : 0;
  auto laser_firmware_version__ = laser_firmware_version ? _fbb.CreateString(laser_firmware_version) : 0;
  auto laser_sn__ = laser_sn ? _fbb.CreateString(laser_sn) : 0;
  auto location_name__ = location_name ? _fbb.CreateString(location_name) : 0;
  auto product_sn__ = product_sn ? _fbb.CreateString(product_sn) : 0;
  return swr::CreateResponseAboutThisMachine(
      _fbb,
      model__,
      fuselage_number__,
      equipment_name__,
      project_area__,
      hmi_version__,
      modem_version__,
      vcu_version__,
      mcu_version__,
      ncu_version__,
      coprocessor_version__,
      battery_version__,
      hmi_serial_number__,
      modem_serial_number__,
      vcu_serial_number__,
      mcu_serial_number__,
      ncu_serial_number__,
      coprocessor_serial_number__,
      battery_serial_number__,
      imsi__,
      iccid__,
      wlan_mac__,
      imsee_pn__,
      imsee_sn__,
      tof_pn__,
      tof_sn__,
      laser_firmware_version__,
      laser_sn__,
      location_name__,
      product_sn__);
}

struct ResponseOperationRecord FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseOperationRecordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORD_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<swr::WorkLog>> *record_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<swr::WorkLog>> *>(VT_RECORD_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORD_LIST) &&
           verifier.VerifyVector(record_list()) &&
           verifier.VerifyVectorOfTables(record_list()) &&
           verifier.EndTable();
  }
};

struct ResponseOperationRecordBuilder {
  typedef ResponseOperationRecord Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_record_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<swr::WorkLog>>> record_list) {
    fbb_.AddOffset(ResponseOperationRecord::VT_RECORD_LIST, record_list);
  }
  explicit ResponseOperationRecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseOperationRecordBuilder &operator=(const ResponseOperationRecordBuilder &);
  flatbuffers::Offset<ResponseOperationRecord> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseOperationRecord>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseOperationRecord> CreateResponseOperationRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<swr::WorkLog>>> record_list = 0) {
  ResponseOperationRecordBuilder builder_(_fbb);
  builder_.add_record_list(record_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseOperationRecord> CreateResponseOperationRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<swr::WorkLog>> *record_list = nullptr) {
  auto record_list__ = record_list ? _fbb.CreateVector<flatbuffers::Offset<swr::WorkLog>>(*record_list) : 0;
  return swr::CreateResponseOperationRecord(
      _fbb,
      record_list__);
}

struct ResponseEquipmentStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseEquipmentStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  swr::EquipmentUnitType type() const {
    return static_cast<swr::EquipmentUnitType>(GetField<int8_t>(VT_TYPE, 0));
  }
  swr::EquipmentUnitData data_type() const {
    return static_cast<swr::EquipmentUnitData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const swr::CoreUnit *data_as_CoreUnit() const {
    return data_type() == swr::EquipmentUnitData_CoreUnit ? static_cast<const swr::CoreUnit *>(data()) : nullptr;
  }
  const swr::MotorUnit *data_as_MotorUnit() const {
    return data_type() == swr::EquipmentUnitData_MotorUnit ? static_cast<const swr::MotorUnit *>(data()) : nullptr;
  }
  const swr::SensorUnit *data_as_SensorUnit() const {
    return data_type() == swr::EquipmentUnitData_SensorUnit ? static_cast<const swr::SensorUnit *>(data()) : nullptr;
  }
  const swr::OtherUnit *data_as_OtherUnit() const {
    return data_type() == swr::EquipmentUnitData_OtherUnit ? static_cast<const swr::OtherUnit *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyEquipmentUnitData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const swr::CoreUnit *ResponseEquipmentStatus::data_as<swr::CoreUnit>() const {
  return data_as_CoreUnit();
}

template<> inline const swr::MotorUnit *ResponseEquipmentStatus::data_as<swr::MotorUnit>() const {
  return data_as_MotorUnit();
}

template<> inline const swr::SensorUnit *ResponseEquipmentStatus::data_as<swr::SensorUnit>() const {
  return data_as_SensorUnit();
}

template<> inline const swr::OtherUnit *ResponseEquipmentStatus::data_as<swr::OtherUnit>() const {
  return data_as_OtherUnit();
}

struct ResponseEquipmentStatusBuilder {
  typedef ResponseEquipmentStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(swr::EquipmentUnitType type) {
    fbb_.AddElement<int8_t>(ResponseEquipmentStatus::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_data_type(swr::EquipmentUnitData data_type) {
    fbb_.AddElement<uint8_t>(ResponseEquipmentStatus::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(ResponseEquipmentStatus::VT_DATA, data);
  }
  explicit ResponseEquipmentStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseEquipmentStatusBuilder &operator=(const ResponseEquipmentStatusBuilder &);
  flatbuffers::Offset<ResponseEquipmentStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseEquipmentStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseEquipmentStatus> CreateResponseEquipmentStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::EquipmentUnitType type = swr::EquipmentUnitType_Core,
    swr::EquipmentUnitData data_type = swr::EquipmentUnitData_NONE,
    flatbuffers::Offset<void> data = 0) {
  ResponseEquipmentStatusBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_type(type);
  return builder_.Finish();
}

struct ResponseSiteRoutes FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseSiteRoutesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROUTE_LIST = 4,
    VT_CLOUD_STATE = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<swr::RouteInfo>> *route_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<swr::RouteInfo>> *>(VT_ROUTE_LIST);
  }
  bool cloud_state() const {
    return GetField<uint8_t>(VT_CLOUD_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROUTE_LIST) &&
           verifier.VerifyVector(route_list()) &&
           verifier.VerifyVectorOfTables(route_list()) &&
           VerifyField<uint8_t>(verifier, VT_CLOUD_STATE) &&
           verifier.EndTable();
  }
};

struct ResponseSiteRoutesBuilder {
  typedef ResponseSiteRoutes Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_route_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<swr::RouteInfo>>> route_list) {
    fbb_.AddOffset(ResponseSiteRoutes::VT_ROUTE_LIST, route_list);
  }
  void add_cloud_state(bool cloud_state) {
    fbb_.AddElement<uint8_t>(ResponseSiteRoutes::VT_CLOUD_STATE, static_cast<uint8_t>(cloud_state), 0);
  }
  explicit ResponseSiteRoutesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseSiteRoutesBuilder &operator=(const ResponseSiteRoutesBuilder &);
  flatbuffers::Offset<ResponseSiteRoutes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseSiteRoutes>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseSiteRoutes> CreateResponseSiteRoutes(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<swr::RouteInfo>>> route_list = 0,
    bool cloud_state = false) {
  ResponseSiteRoutesBuilder builder_(_fbb);
  builder_.add_route_list(route_list);
  builder_.add_cloud_state(cloud_state);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseSiteRoutes> CreateResponseSiteRoutesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<swr::RouteInfo>> *route_list = nullptr,
    bool cloud_state = false) {
  auto route_list__ = route_list ? _fbb.CreateVector<flatbuffers::Offset<swr::RouteInfo>>(*route_list) : 0;
  return swr::CreateResponseSiteRoutes(
      _fbb,
      route_list__,
      cloud_state);
}

struct ResponseDelRoute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseDelRouteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROUTE = 4
  };
  const swr::RouteIdent *route() const {
    return GetPointer<const swr::RouteIdent *>(VT_ROUTE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROUTE) &&
           verifier.VerifyTable(route()) &&
           verifier.EndTable();
  }
};

struct ResponseDelRouteBuilder {
  typedef ResponseDelRoute Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_route(flatbuffers::Offset<swr::RouteIdent> route) {
    fbb_.AddOffset(ResponseDelRoute::VT_ROUTE, route);
  }
  explicit ResponseDelRouteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseDelRouteBuilder &operator=(const ResponseDelRouteBuilder &);
  flatbuffers::Offset<ResponseDelRoute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseDelRoute>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseDelRoute> CreateResponseDelRoute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<swr::RouteIdent> route = 0) {
  ResponseDelRouteBuilder builder_(_fbb);
  builder_.add_route(route);
  return builder_.Finish();
}

struct ResponseMachineParams FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseMachineParamsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_DATA = 6
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  const swr::MachineParamResp *data() const {
    return GetPointer<const swr::MachineParamResp *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct ResponseMachineParamsBuilder {
  typedef ResponseMachineParams Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(ResponseMachineParams::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_data(flatbuffers::Offset<swr::MachineParamResp> data) {
    fbb_.AddOffset(ResponseMachineParams::VT_DATA, data);
  }
  explicit ResponseMachineParamsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseMachineParamsBuilder &operator=(const ResponseMachineParamsBuilder &);
  flatbuffers::Offset<ResponseMachineParams> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseMachineParams>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseMachineParams> CreateResponseMachineParams(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    flatbuffers::Offset<swr::MachineParamResp> data = 0) {
  ResponseMachineParamsBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct ResponseEquipmentTesting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseEquipmentTestingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_DATA = 6
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  const swr::EquipmentTestingResp *data() const {
    return GetPointer<const swr::EquipmentTestingResp *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct ResponseEquipmentTestingBuilder {
  typedef ResponseEquipmentTesting Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(ResponseEquipmentTesting::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  void add_data(flatbuffers::Offset<swr::EquipmentTestingResp> data) {
    fbb_.AddOffset(ResponseEquipmentTesting::VT_DATA, data);
  }
  explicit ResponseEquipmentTestingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseEquipmentTestingBuilder &operator=(const ResponseEquipmentTestingBuilder &);
  flatbuffers::Offset<ResponseEquipmentTesting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseEquipmentTesting>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseEquipmentTesting> CreateResponseEquipmentTesting(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false,
    flatbuffers::Offset<swr::EquipmentTestingResp> data = 0) {
  ResponseEquipmentTestingBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_state(state);
  return builder_.Finish();
}

struct ResponseFaultSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseFaultSettingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_DATA = 6
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  const swr::FaultSettingResp *data() const {
    return GetPointer<const swr::FaultSettingResp *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct ResponseFaultSettingBuilder {
  typedef ResponseFaultSetting Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(ResponseFaultSetting::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_data(flatbuffers::Offset<swr::FaultSettingResp> data) {
    fbb_.AddOffset(ResponseFaultSetting::VT_DATA, data);
  }
  explicit ResponseFaultSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseFaultSettingBuilder &operator=(const ResponseFaultSettingBuilder &);
  flatbuffers::Offset<ResponseFaultSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseFaultSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseFaultSetting> CreateResponseFaultSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    flatbuffers::Offset<swr::FaultSettingResp> data = 0) {
  ResponseFaultSettingBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct ResponseWorkingMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseWorkingModeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_DATA = 6
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  const swr::WorkingModeData *data() const {
    return GetPointer<const swr::WorkingModeData *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct ResponseWorkingModeBuilder {
  typedef ResponseWorkingMode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(ResponseWorkingMode::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_data(flatbuffers::Offset<swr::WorkingModeData> data) {
    fbb_.AddOffset(ResponseWorkingMode::VT_DATA, data);
  }
  explicit ResponseWorkingModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseWorkingModeBuilder &operator=(const ResponseWorkingModeBuilder &);
  flatbuffers::Offset<ResponseWorkingMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseWorkingMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseWorkingMode> CreateResponseWorkingMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    flatbuffers::Offset<swr::WorkingModeData> data = 0) {
  ResponseWorkingModeBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct ResponseWorkingHours FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseWorkingHoursBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_DATA = 6
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  const swr::WorkingHoursData *data() const {
    return GetPointer<const swr::WorkingHoursData *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct ResponseWorkingHoursBuilder {
  typedef ResponseWorkingHours Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(ResponseWorkingHours::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_data(flatbuffers::Offset<swr::WorkingHoursData> data) {
    fbb_.AddOffset(ResponseWorkingHours::VT_DATA, data);
  }
  explicit ResponseWorkingHoursBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseWorkingHoursBuilder &operator=(const ResponseWorkingHoursBuilder &);
  flatbuffers::Offset<ResponseWorkingHours> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseWorkingHours>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseWorkingHours> CreateResponseWorkingHours(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    flatbuffers::Offset<swr::WorkingHoursData> data = 0) {
  ResponseWorkingHoursBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct ResponseSiteCode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseSiteCodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SITE_CODE = 4
  };
  const flatbuffers::String *site_code() const {
    return GetPointer<const flatbuffers::String *>(VT_SITE_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SITE_CODE) &&
           verifier.VerifyString(site_code()) &&
           verifier.EndTable();
  }
};

struct ResponseSiteCodeBuilder {
  typedef ResponseSiteCode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_site_code(flatbuffers::Offset<flatbuffers::String> site_code) {
    fbb_.AddOffset(ResponseSiteCode::VT_SITE_CODE, site_code);
  }
  explicit ResponseSiteCodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseSiteCodeBuilder &operator=(const ResponseSiteCodeBuilder &);
  flatbuffers::Offset<ResponseSiteCode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseSiteCode>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseSiteCode> CreateResponseSiteCode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> site_code = 0) {
  ResponseSiteCodeBuilder builder_(_fbb);
  builder_.add_site_code(site_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseSiteCode> CreateResponseSiteCodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *site_code = nullptr) {
  auto site_code__ = site_code ? _fbb.CreateString(site_code) : 0;
  return swr::CreateResponseSiteCode(
      _fbb,
      site_code__);
}

struct ResponseSavingPower FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseSavingPowerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           verifier.EndTable();
  }
};

struct ResponseSavingPowerBuilder {
  typedef ResponseSavingPower Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(ResponseSavingPower::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit ResponseSavingPowerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseSavingPowerBuilder &operator=(const ResponseSavingPowerBuilder &);
  flatbuffers::Offset<ResponseSavingPower> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseSavingPower>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseSavingPower> CreateResponseSavingPower(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  ResponseSavingPowerBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct ResponseStandby FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseStandbyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           verifier.EndTable();
  }
};

struct ResponseStandbyBuilder {
  typedef ResponseStandby Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(ResponseStandby::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit ResponseStandbyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseStandbyBuilder &operator=(const ResponseStandbyBuilder &);
  flatbuffers::Offset<ResponseStandby> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseStandby>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseStandby> CreateResponseStandby(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  ResponseStandbyBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct ResponseExitStandby FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseExitStandbyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           verifier.EndTable();
  }
};

struct ResponseExitStandbyBuilder {
  typedef ResponseExitStandby Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(ResponseExitStandby::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit ResponseExitStandbyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseExitStandbyBuilder &operator=(const ResponseExitStandbyBuilder &);
  flatbuffers::Offset<ResponseExitStandby> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseExitStandby>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseExitStandby> CreateResponseExitStandby(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  ResponseExitStandbyBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct ResponseGetVolume FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseGetVolumeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VOLUME = 4
  };
  int32_t volume() const {
    return GetField<int32_t>(VT_VOLUME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VOLUME) &&
           verifier.EndTable();
  }
};

struct ResponseGetVolumeBuilder {
  typedef ResponseGetVolume Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_volume(int32_t volume) {
    fbb_.AddElement<int32_t>(ResponseGetVolume::VT_VOLUME, volume, 0);
  }
  explicit ResponseGetVolumeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseGetVolumeBuilder &operator=(const ResponseGetVolumeBuilder &);
  flatbuffers::Offset<ResponseGetVolume> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseGetVolume>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseGetVolume> CreateResponseGetVolume(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t volume = 0) {
  ResponseGetVolumeBuilder builder_(_fbb);
  builder_.add_volume(volume);
  return builder_.Finish();
}

struct ResponseGetBright FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseGetBrightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BRIGHT = 4
  };
  int32_t bright() const {
    return GetField<int32_t>(VT_BRIGHT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_BRIGHT) &&
           verifier.EndTable();
  }
};

struct ResponseGetBrightBuilder {
  typedef ResponseGetBright Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bright(int32_t bright) {
    fbb_.AddElement<int32_t>(ResponseGetBright::VT_BRIGHT, bright, 0);
  }
  explicit ResponseGetBrightBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseGetBrightBuilder &operator=(const ResponseGetBrightBuilder &);
  flatbuffers::Offset<ResponseGetBright> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseGetBright>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseGetBright> CreateResponseGetBright(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t bright = 0) {
  ResponseGetBrightBuilder builder_(_fbb);
  builder_.add_bright(bright);
  return builder_.Finish();
}

struct ResponseGetVcuData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseGetVcuDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REG_ID = 4,
    VT_REG_DATA = 6
  };
  const flatbuffers::Vector<uint16_t> *reg_id() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_REG_ID);
  }
  const flatbuffers::Vector<uint16_t> *reg_data() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_REG_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REG_ID) &&
           verifier.VerifyVector(reg_id()) &&
           VerifyOffset(verifier, VT_REG_DATA) &&
           verifier.VerifyVector(reg_data()) &&
           verifier.EndTable();
  }
};

struct ResponseGetVcuDataBuilder {
  typedef ResponseGetVcuData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reg_id(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> reg_id) {
    fbb_.AddOffset(ResponseGetVcuData::VT_REG_ID, reg_id);
  }
  void add_reg_data(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> reg_data) {
    fbb_.AddOffset(ResponseGetVcuData::VT_REG_DATA, reg_data);
  }
  explicit ResponseGetVcuDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseGetVcuDataBuilder &operator=(const ResponseGetVcuDataBuilder &);
  flatbuffers::Offset<ResponseGetVcuData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseGetVcuData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseGetVcuData> CreateResponseGetVcuData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> reg_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> reg_data = 0) {
  ResponseGetVcuDataBuilder builder_(_fbb);
  builder_.add_reg_data(reg_data);
  builder_.add_reg_id(reg_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseGetVcuData> CreateResponseGetVcuDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *reg_id = nullptr,
    const std::vector<uint16_t> *reg_data = nullptr) {
  auto reg_id__ = reg_id ? _fbb.CreateVector<uint16_t>(*reg_id) : 0;
  auto reg_data__ = reg_data ? _fbb.CreateVector<uint16_t>(*reg_data) : 0;
  return swr::CreateResponseGetVcuData(
      _fbb,
      reg_id__,
      reg_data__);
}

struct ResponseTestConsumables FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseTestConsumablesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONSUMABLES = 4,
    VT_CHARGING_PLUG = 6,
    VT_SAFETY_SWITCH = 8,
    VT_HANDLE_POSITION = 10
  };
  bool consumables() const {
    return GetField<uint8_t>(VT_CONSUMABLES, 0) != 0;
  }
  bool charging_plug() const {
    return GetField<uint8_t>(VT_CHARGING_PLUG, 0) != 0;
  }
  bool safety_switch() const {
    return GetField<uint8_t>(VT_SAFETY_SWITCH, 0) != 0;
  }
  bool handle_position() const {
    return GetField<uint8_t>(VT_HANDLE_POSITION, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONSUMABLES) &&
           VerifyField<uint8_t>(verifier, VT_CHARGING_PLUG) &&
           VerifyField<uint8_t>(verifier, VT_SAFETY_SWITCH) &&
           VerifyField<uint8_t>(verifier, VT_HANDLE_POSITION) &&
           verifier.EndTable();
  }
};

struct ResponseTestConsumablesBuilder {
  typedef ResponseTestConsumables Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_consumables(bool consumables) {
    fbb_.AddElement<uint8_t>(ResponseTestConsumables::VT_CONSUMABLES, static_cast<uint8_t>(consumables), 0);
  }
  void add_charging_plug(bool charging_plug) {
    fbb_.AddElement<uint8_t>(ResponseTestConsumables::VT_CHARGING_PLUG, static_cast<uint8_t>(charging_plug), 0);
  }
  void add_safety_switch(bool safety_switch) {
    fbb_.AddElement<uint8_t>(ResponseTestConsumables::VT_SAFETY_SWITCH, static_cast<uint8_t>(safety_switch), 0);
  }
  void add_handle_position(bool handle_position) {
    fbb_.AddElement<uint8_t>(ResponseTestConsumables::VT_HANDLE_POSITION, static_cast<uint8_t>(handle_position), 0);
  }
  explicit ResponseTestConsumablesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseTestConsumablesBuilder &operator=(const ResponseTestConsumablesBuilder &);
  flatbuffers::Offset<ResponseTestConsumables> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseTestConsumables>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseTestConsumables> CreateResponseTestConsumables(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool consumables = false,
    bool charging_plug = false,
    bool safety_switch = false,
    bool handle_position = false) {
  ResponseTestConsumablesBuilder builder_(_fbb);
  builder_.add_handle_position(handle_position);
  builder_.add_safety_switch(safety_switch);
  builder_.add_charging_plug(charging_plug);
  builder_.add_consumables(consumables);
  return builder_.Finish();
}

struct ResponseLockState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseLockStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_BODY_NUM = 6
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  const flatbuffers::String *body_num() const {
    return GetPointer<const flatbuffers::String *>(VT_BODY_NUM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_BODY_NUM) &&
           verifier.VerifyString(body_num()) &&
           verifier.EndTable();
  }
};

struct ResponseLockStateBuilder {
  typedef ResponseLockState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(ResponseLockState::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  void add_body_num(flatbuffers::Offset<flatbuffers::String> body_num) {
    fbb_.AddOffset(ResponseLockState::VT_BODY_NUM, body_num);
  }
  explicit ResponseLockStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseLockStateBuilder &operator=(const ResponseLockStateBuilder &);
  flatbuffers::Offset<ResponseLockState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseLockState>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseLockState> CreateResponseLockState(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false,
    flatbuffers::Offset<flatbuffers::String> body_num = 0) {
  ResponseLockStateBuilder builder_(_fbb);
  builder_.add_body_num(body_num);
  builder_.add_state(state);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseLockState> CreateResponseLockStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false,
    const char *body_num = nullptr) {
  auto body_num__ = body_num ? _fbb.CreateString(body_num) : 0;
  return swr::CreateResponseLockState(
      _fbb,
      state,
      body_num__);
}

struct ResponseLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           verifier.EndTable();
  }
};

struct ResponseLoginBuilder {
  typedef ResponseLogin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(ResponseLogin::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit ResponseLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseLoginBuilder &operator=(const ResponseLoginBuilder &);
  flatbuffers::Offset<ResponseLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseLogin>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseLogin> CreateResponseLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  ResponseLoginBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct ResponseUpdatePwd FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseUpdatePwdBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           verifier.EndTable();
  }
};

struct ResponseUpdatePwdBuilder {
  typedef ResponseUpdatePwd Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(ResponseUpdatePwd::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit ResponseUpdatePwdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseUpdatePwdBuilder &operator=(const ResponseUpdatePwdBuilder &);
  flatbuffers::Offset<ResponseUpdatePwd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseUpdatePwd>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseUpdatePwd> CreateResponseUpdatePwd(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  ResponseUpdatePwdBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct ResponseUserList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseUserListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<swr::LoginUser>> *user_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<swr::LoginUser>> *>(VT_USER_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_LIST) &&
           verifier.VerifyVector(user_list()) &&
           verifier.VerifyVectorOfTables(user_list()) &&
           verifier.EndTable();
  }
};

struct ResponseUserListBuilder {
  typedef ResponseUserList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<swr::LoginUser>>> user_list) {
    fbb_.AddOffset(ResponseUserList::VT_USER_LIST, user_list);
  }
  explicit ResponseUserListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseUserListBuilder &operator=(const ResponseUserListBuilder &);
  flatbuffers::Offset<ResponseUserList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResponseUserList>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResponseUserList> CreateResponseUserList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<swr::LoginUser>>> user_list = 0) {
  ResponseUserListBuilder builder_(_fbb);
  builder_.add_user_list(user_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResponseUserList> CreateResponseUserListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<swr::LoginUser>> *user_list = nullptr) {
  auto user_list__ = user_list ? _fbb.CreateVector<flatbuffers::Offset<swr::LoginUser>>(*user_list) : 0;
  return swr::CreateResponseUserList(
      _fbb,
      user_list__);
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_TYPE = 6,
    VT_MESSAGE_TYPE = 8,
    VT_MESSAGE = 10
  };
  int64_t status() const {
    return GetField<int64_t>(VT_STATUS, 0);
  }
  swr::RequestType type() const {
    return static_cast<swr::RequestType>(GetField<int8_t>(VT_TYPE, 0));
  }
  swr::ResponseDataField message_type() const {
    return static_cast<swr::ResponseDataField>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const swr::ResponseNone *message_as_ResponseNone() const {
    return message_type() == swr::ResponseDataField_ResponseNone ? static_cast<const swr::ResponseNone *>(message()) : nullptr;
  }
  const swr::RequestSelfTest *message_as_RequestSelfTest() const {
    return message_type() == swr::ResponseDataField_RequestSelfTest ? static_cast<const swr::RequestSelfTest *>(message()) : nullptr;
  }
  const swr::RequestCleanMode *message_as_RequestCleanMode() const {
    return message_type() == swr::ResponseDataField_RequestCleanMode ? static_cast<const swr::RequestCleanMode *>(message()) : nullptr;
  }
  const swr::RequestManual *message_as_RequestManual() const {
    return message_type() == swr::ResponseDataField_RequestManual ? static_cast<const swr::RequestManual *>(message()) : nullptr;
  }
  const swr::RequestVideo *message_as_RequestVideo() const {
    return message_type() == swr::ResponseDataField_RequestVideo ? static_cast<const swr::RequestVideo *>(message()) : nullptr;
  }
  const swr::RequestScanQR *message_as_RequestScanQR() const {
    return message_type() == swr::ResponseDataField_RequestScanQR ? static_cast<const swr::RequestScanQR *>(message()) : nullptr;
  }
  const swr::ResponseTeachClean *message_as_ResponseTeachClean() const {
    return message_type() == swr::ResponseDataField_ResponseTeachClean ? static_cast<const swr::ResponseTeachClean *>(message()) : nullptr;
  }
  const swr::ResponseAutoClean *message_as_ResponseAutoClean() const {
    return message_type() == swr::ResponseDataField_ResponseAutoClean ? static_cast<const swr::ResponseAutoClean *>(message()) : nullptr;
  }
  const swr::ResponseAboutThisMachine *message_as_ResponseAboutThisMachine() const {
    return message_type() == swr::ResponseDataField_ResponseAboutThisMachine ? static_cast<const swr::ResponseAboutThisMachine *>(message()) : nullptr;
  }
  const swr::ResponseOperationRecord *message_as_ResponseOperationRecord() const {
    return message_type() == swr::ResponseDataField_ResponseOperationRecord ? static_cast<const swr::ResponseOperationRecord *>(message()) : nullptr;
  }
  const swr::ResponseEquipmentStatus *message_as_ResponseEquipmentStatus() const {
    return message_type() == swr::ResponseDataField_ResponseEquipmentStatus ? static_cast<const swr::ResponseEquipmentStatus *>(message()) : nullptr;
  }
  const swr::ResponseSiteRoutes *message_as_ResponseSiteRoutes() const {
    return message_type() == swr::ResponseDataField_ResponseSiteRoutes ? static_cast<const swr::ResponseSiteRoutes *>(message()) : nullptr;
  }
  const swr::RequestDelRoute *message_as_RequestDelRoute() const {
    return message_type() == swr::ResponseDataField_RequestDelRoute ? static_cast<const swr::RequestDelRoute *>(message()) : nullptr;
  }
  const swr::RequestTransSlot *message_as_RequestTransSlot() const {
    return message_type() == swr::ResponseDataField_RequestTransSlot ? static_cast<const swr::RequestTransSlot *>(message()) : nullptr;
  }
  const swr::RequestDownloadRoute *message_as_RequestDownloadRoute() const {
    return message_type() == swr::ResponseDataField_RequestDownloadRoute ? static_cast<const swr::RequestDownloadRoute *>(message()) : nullptr;
  }
  const swr::RequestVerifyPassword *message_as_RequestVerifyPassword() const {
    return message_type() == swr::ResponseDataField_RequestVerifyPassword ? static_cast<const swr::RequestVerifyPassword *>(message()) : nullptr;
  }
  const swr::ResponseMachineParams *message_as_ResponseMachineParams() const {
    return message_type() == swr::ResponseDataField_ResponseMachineParams ? static_cast<const swr::ResponseMachineParams *>(message()) : nullptr;
  }
  const swr::ResponseEquipmentTesting *message_as_ResponseEquipmentTesting() const {
    return message_type() == swr::ResponseDataField_ResponseEquipmentTesting ? static_cast<const swr::ResponseEquipmentTesting *>(message()) : nullptr;
  }
  const swr::RequestEquipmentTestingItem *message_as_RequestEquipmentTestingItem() const {
    return message_type() == swr::ResponseDataField_RequestEquipmentTestingItem ? static_cast<const swr::RequestEquipmentTestingItem *>(message()) : nullptr;
  }
  const swr::ResponseFaultSetting *message_as_ResponseFaultSetting() const {
    return message_type() == swr::ResponseDataField_ResponseFaultSetting ? static_cast<const swr::ResponseFaultSetting *>(message()) : nullptr;
  }
  const swr::ResponseWorkingMode *message_as_ResponseWorkingMode() const {
    return message_type() == swr::ResponseDataField_ResponseWorkingMode ? static_cast<const swr::ResponseWorkingMode *>(message()) : nullptr;
  }
  const swr::ResponseWorkingHours *message_as_ResponseWorkingHours() const {
    return message_type() == swr::ResponseDataField_ResponseWorkingHours ? static_cast<const swr::ResponseWorkingHours *>(message()) : nullptr;
  }
  const swr::RequestChangePassword *message_as_RequestChangePassword() const {
    return message_type() == swr::ResponseDataField_RequestChangePassword ? static_cast<const swr::RequestChangePassword *>(message()) : nullptr;
  }
  const swr::ResponseSiteCode *message_as_ResponseSiteCode() const {
    return message_type() == swr::ResponseDataField_ResponseSiteCode ? static_cast<const swr::ResponseSiteCode *>(message()) : nullptr;
  }
  const swr::ResponseSavingPower *message_as_ResponseSavingPower() const {
    return message_type() == swr::ResponseDataField_ResponseSavingPower ? static_cast<const swr::ResponseSavingPower *>(message()) : nullptr;
  }
  const swr::ResponseStandby *message_as_ResponseStandby() const {
    return message_type() == swr::ResponseDataField_ResponseStandby ? static_cast<const swr::ResponseStandby *>(message()) : nullptr;
  }
  const swr::ResponseGetVolume *message_as_ResponseGetVolume() const {
    return message_type() == swr::ResponseDataField_ResponseGetVolume ? static_cast<const swr::ResponseGetVolume *>(message()) : nullptr;
  }
  const swr::ResponseGetBright *message_as_ResponseGetBright() const {
    return message_type() == swr::ResponseDataField_ResponseGetBright ? static_cast<const swr::ResponseGetBright *>(message()) : nullptr;
  }
  const swr::ResponseGetVcuData *message_as_ResponseGetVcuData() const {
    return message_type() == swr::ResponseDataField_ResponseGetVcuData ? static_cast<const swr::ResponseGetVcuData *>(message()) : nullptr;
  }
  const swr::ResponseTestConsumables *message_as_ResponseTestConsumables() const {
    return message_type() == swr::ResponseDataField_ResponseTestConsumables ? static_cast<const swr::ResponseTestConsumables *>(message()) : nullptr;
  }
  const swr::ResponseExitStandby *message_as_ResponseExitStandby() const {
    return message_type() == swr::ResponseDataField_ResponseExitStandby ? static_cast<const swr::ResponseExitStandby *>(message()) : nullptr;
  }
  const swr::ResponseLockState *message_as_ResponseLockState() const {
    return message_type() == swr::ResponseDataField_ResponseLockState ? static_cast<const swr::ResponseLockState *>(message()) : nullptr;
  }
  const swr::ResponseLogin *message_as_ResponseLogin() const {
    return message_type() == swr::ResponseDataField_ResponseLogin ? static_cast<const swr::ResponseLogin *>(message()) : nullptr;
  }
  const swr::ResponseUpdatePwd *message_as_ResponseUpdatePwd() const {
    return message_type() == swr::ResponseDataField_ResponseUpdatePwd ? static_cast<const swr::ResponseUpdatePwd *>(message()) : nullptr;
  }
  const swr::ResponseUserList *message_as_ResponseUserList() const {
    return message_type() == swr::ResponseDataField_ResponseUserList ? static_cast<const swr::ResponseUserList *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_STATUS) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyResponseDataField(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const swr::ResponseNone *Response::message_as<swr::ResponseNone>() const {
  return message_as_ResponseNone();
}

template<> inline const swr::RequestSelfTest *Response::message_as<swr::RequestSelfTest>() const {
  return message_as_RequestSelfTest();
}

template<> inline const swr::RequestCleanMode *Response::message_as<swr::RequestCleanMode>() const {
  return message_as_RequestCleanMode();
}

template<> inline const swr::RequestManual *Response::message_as<swr::RequestManual>() const {
  return message_as_RequestManual();
}

template<> inline const swr::RequestVideo *Response::message_as<swr::RequestVideo>() const {
  return message_as_RequestVideo();
}

template<> inline const swr::RequestScanQR *Response::message_as<swr::RequestScanQR>() const {
  return message_as_RequestScanQR();
}

template<> inline const swr::ResponseTeachClean *Response::message_as<swr::ResponseTeachClean>() const {
  return message_as_ResponseTeachClean();
}

template<> inline const swr::ResponseAutoClean *Response::message_as<swr::ResponseAutoClean>() const {
  return message_as_ResponseAutoClean();
}

template<> inline const swr::ResponseAboutThisMachine *Response::message_as<swr::ResponseAboutThisMachine>() const {
  return message_as_ResponseAboutThisMachine();
}

template<> inline const swr::ResponseOperationRecord *Response::message_as<swr::ResponseOperationRecord>() const {
  return message_as_ResponseOperationRecord();
}

template<> inline const swr::ResponseEquipmentStatus *Response::message_as<swr::ResponseEquipmentStatus>() const {
  return message_as_ResponseEquipmentStatus();
}

template<> inline const swr::ResponseSiteRoutes *Response::message_as<swr::ResponseSiteRoutes>() const {
  return message_as_ResponseSiteRoutes();
}

template<> inline const swr::RequestDelRoute *Response::message_as<swr::RequestDelRoute>() const {
  return message_as_RequestDelRoute();
}

template<> inline const swr::RequestTransSlot *Response::message_as<swr::RequestTransSlot>() const {
  return message_as_RequestTransSlot();
}

template<> inline const swr::RequestDownloadRoute *Response::message_as<swr::RequestDownloadRoute>() const {
  return message_as_RequestDownloadRoute();
}

template<> inline const swr::RequestVerifyPassword *Response::message_as<swr::RequestVerifyPassword>() const {
  return message_as_RequestVerifyPassword();
}

template<> inline const swr::ResponseMachineParams *Response::message_as<swr::ResponseMachineParams>() const {
  return message_as_ResponseMachineParams();
}

template<> inline const swr::ResponseEquipmentTesting *Response::message_as<swr::ResponseEquipmentTesting>() const {
  return message_as_ResponseEquipmentTesting();
}

template<> inline const swr::RequestEquipmentTestingItem *Response::message_as<swr::RequestEquipmentTestingItem>() const {
  return message_as_RequestEquipmentTestingItem();
}

template<> inline const swr::ResponseFaultSetting *Response::message_as<swr::ResponseFaultSetting>() const {
  return message_as_ResponseFaultSetting();
}

template<> inline const swr::ResponseWorkingMode *Response::message_as<swr::ResponseWorkingMode>() const {
  return message_as_ResponseWorkingMode();
}

template<> inline const swr::ResponseWorkingHours *Response::message_as<swr::ResponseWorkingHours>() const {
  return message_as_ResponseWorkingHours();
}

template<> inline const swr::RequestChangePassword *Response::message_as<swr::RequestChangePassword>() const {
  return message_as_RequestChangePassword();
}

template<> inline const swr::ResponseSiteCode *Response::message_as<swr::ResponseSiteCode>() const {
  return message_as_ResponseSiteCode();
}

template<> inline const swr::ResponseSavingPower *Response::message_as<swr::ResponseSavingPower>() const {
  return message_as_ResponseSavingPower();
}

template<> inline const swr::ResponseStandby *Response::message_as<swr::ResponseStandby>() const {
  return message_as_ResponseStandby();
}

template<> inline const swr::ResponseGetVolume *Response::message_as<swr::ResponseGetVolume>() const {
  return message_as_ResponseGetVolume();
}

template<> inline const swr::ResponseGetBright *Response::message_as<swr::ResponseGetBright>() const {
  return message_as_ResponseGetBright();
}

template<> inline const swr::ResponseGetVcuData *Response::message_as<swr::ResponseGetVcuData>() const {
  return message_as_ResponseGetVcuData();
}

template<> inline const swr::ResponseTestConsumables *Response::message_as<swr::ResponseTestConsumables>() const {
  return message_as_ResponseTestConsumables();
}

template<> inline const swr::ResponseExitStandby *Response::message_as<swr::ResponseExitStandby>() const {
  return message_as_ResponseExitStandby();
}

template<> inline const swr::ResponseLockState *Response::message_as<swr::ResponseLockState>() const {
  return message_as_ResponseLockState();
}

template<> inline const swr::ResponseLogin *Response::message_as<swr::ResponseLogin>() const {
  return message_as_ResponseLogin();
}

template<> inline const swr::ResponseUpdatePwd *Response::message_as<swr::ResponseUpdatePwd>() const {
  return message_as_ResponseUpdatePwd();
}

template<> inline const swr::ResponseUserList *Response::message_as<swr::ResponseUserList>() const {
  return message_as_ResponseUserList();
}

struct ResponseBuilder {
  typedef Response Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int64_t status) {
    fbb_.AddElement<int64_t>(Response::VT_STATUS, status, 0);
  }
  void add_type(swr::RequestType type) {
    fbb_.AddElement<int8_t>(Response::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_message_type(swr::ResponseDataField message_type) {
    fbb_.AddElement<uint8_t>(Response::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Response::VT_MESSAGE, message);
  }
  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseBuilder &operator=(const ResponseBuilder &);
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t status = 0,
    swr::RequestType type = swr::RequestType_SelfTest,
    swr::ResponseDataField message_type = swr::ResponseDataField_NONE,
    flatbuffers::Offset<void> message = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_status(status);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyResponseDataField(flatbuffers::Verifier &verifier, const void *obj, ResponseDataField type) {
  switch (type) {
    case ResponseDataField_NONE: {
      return true;
    }
    case ResponseDataField_ResponseNone: {
      auto ptr = reinterpret_cast<const swr::ResponseNone *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestSelfTest: {
      auto ptr = reinterpret_cast<const swr::RequestSelfTest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestCleanMode: {
      auto ptr = reinterpret_cast<const swr::RequestCleanMode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestManual: {
      auto ptr = reinterpret_cast<const swr::RequestManual *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestVideo: {
      auto ptr = reinterpret_cast<const swr::RequestVideo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestScanQR: {
      auto ptr = reinterpret_cast<const swr::RequestScanQR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseTeachClean: {
      auto ptr = reinterpret_cast<const swr::ResponseTeachClean *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseAutoClean: {
      auto ptr = reinterpret_cast<const swr::ResponseAutoClean *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseAboutThisMachine: {
      auto ptr = reinterpret_cast<const swr::ResponseAboutThisMachine *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseOperationRecord: {
      auto ptr = reinterpret_cast<const swr::ResponseOperationRecord *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseEquipmentStatus: {
      auto ptr = reinterpret_cast<const swr::ResponseEquipmentStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseSiteRoutes: {
      auto ptr = reinterpret_cast<const swr::ResponseSiteRoutes *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestDelRoute: {
      auto ptr = reinterpret_cast<const swr::RequestDelRoute *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestTransSlot: {
      auto ptr = reinterpret_cast<const swr::RequestTransSlot *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestDownloadRoute: {
      auto ptr = reinterpret_cast<const swr::RequestDownloadRoute *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestVerifyPassword: {
      auto ptr = reinterpret_cast<const swr::RequestVerifyPassword *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseMachineParams: {
      auto ptr = reinterpret_cast<const swr::ResponseMachineParams *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseEquipmentTesting: {
      auto ptr = reinterpret_cast<const swr::ResponseEquipmentTesting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestEquipmentTestingItem: {
      auto ptr = reinterpret_cast<const swr::RequestEquipmentTestingItem *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseFaultSetting: {
      auto ptr = reinterpret_cast<const swr::ResponseFaultSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseWorkingMode: {
      auto ptr = reinterpret_cast<const swr::ResponseWorkingMode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseWorkingHours: {
      auto ptr = reinterpret_cast<const swr::ResponseWorkingHours *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_RequestChangePassword: {
      auto ptr = reinterpret_cast<const swr::RequestChangePassword *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseSiteCode: {
      auto ptr = reinterpret_cast<const swr::ResponseSiteCode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseSavingPower: {
      auto ptr = reinterpret_cast<const swr::ResponseSavingPower *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseStandby: {
      auto ptr = reinterpret_cast<const swr::ResponseStandby *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseGetVolume: {
      auto ptr = reinterpret_cast<const swr::ResponseGetVolume *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseGetBright: {
      auto ptr = reinterpret_cast<const swr::ResponseGetBright *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseGetVcuData: {
      auto ptr = reinterpret_cast<const swr::ResponseGetVcuData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseTestConsumables: {
      auto ptr = reinterpret_cast<const swr::ResponseTestConsumables *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseExitStandby: {
      auto ptr = reinterpret_cast<const swr::ResponseExitStandby *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseLockState: {
      auto ptr = reinterpret_cast<const swr::ResponseLockState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseLogin: {
      auto ptr = reinterpret_cast<const swr::ResponseLogin *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseUpdatePwd: {
      auto ptr = reinterpret_cast<const swr::ResponseUpdatePwd *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResponseDataField_ResponseUserList: {
      auto ptr = reinterpret_cast<const swr::ResponseUserList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyResponseDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResponseDataField(
        verifier,  values->Get(i), types->GetEnum<ResponseDataField>(i))) {
      return false;
    }
  }
  return true;
}

inline const swr::Response *GetResponse(const void *buf) {
  return flatbuffers::GetRoot<swr::Response>(buf);
}

inline const swr::Response *GetSizePrefixedResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<swr::Response>(buf);
}

inline bool VerifyResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<swr::Response>(nullptr);
}

inline bool VerifySizePrefixedResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<swr::Response>(nullptr);
}

inline void FinishResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<swr::Response> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<swr::Response> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace swr

#endif  // FLATBUFFERS_GENERATED_RESPONSE_SWR_H_
