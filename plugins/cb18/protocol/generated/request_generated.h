// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_SWR_H_
#define FLATBUFFERS_GENERATED_REQUEST_SWR_H_

#include "flatbuffers/flatbuffers.h"

#include "public_generated.h"

namespace swr {

struct RequestSelfTest;
struct RequestSelfTestBuilder;

struct RequestHMI;
struct RequestHMIBuilder;

struct RequestCleanMode;
struct RequestCleanModeBuilder;

struct RequestManual;
struct RequestManualBuilder;

struct RequestVideo;
struct RequestVideoBuilder;

struct RequestScanQR;
struct RequestScanQRBuilder;

struct RequestTeachClean;
struct RequestTeachCleanBuilder;

struct RequestAutoClean;
struct RequestAutoCleanBuilder;

struct RequestAboutThisMachine;
struct RequestAboutThisMachineBuilder;

struct RequestOperationRecord;
struct RequestOperationRecordBuilder;

struct RequestEquipmentStatus;
struct RequestEquipmentStatusBuilder;

struct RequestSiteRoutes;
struct RequestSiteRoutesBuilder;

struct RequestDelRoute;
struct RequestDelRouteBuilder;

struct RequestTransSlot;
struct RequestTransSlotBuilder;

struct RequestDownloadRoute;
struct RequestDownloadRouteBuilder;

struct RequestVerifyPassword;
struct RequestVerifyPasswordBuilder;

struct RequestMachineParams;
struct RequestMachineParamsBuilder;

struct RequestEquipmentTesting;
struct RequestEquipmentTestingBuilder;

struct RequestEquipmentTestingItem;
struct RequestEquipmentTestingItemBuilder;

struct RequestFaultSetting;
struct RequestFaultSettingBuilder;

struct RequestWorkingMode;
struct RequestWorkingModeBuilder;

struct RequestWorkingHours;
struct RequestWorkingHoursBuilder;

struct RequestChangePassword;
struct RequestChangePasswordBuilder;

struct RequestSiteCode;
struct RequestSiteCodeBuilder;

struct RequestSavingPower;
struct RequestSavingPowerBuilder;

struct RequestStandby;
struct RequestStandbyBuilder;

struct RequestExitStandby;
struct RequestExitStandbyBuilder;

struct RequestUpdateExceptionConfig;
struct RequestUpdateExceptionConfigBuilder;

struct RequestOneButtonSwitch;
struct RequestOneButtonSwitchBuilder;

struct RequestPowerDown;
struct RequestPowerDownBuilder;

struct RequestMotionControl;
struct RequestMotionControlBuilder;

struct RequestSetVolume;
struct RequestSetVolumeBuilder;

struct RequestGetVolume;
struct RequestGetVolumeBuilder;

struct RequestEnableWifi;
struct RequestEnableWifiBuilder;

struct RequestFaultCode;
struct RequestFaultCodeBuilder;

struct RequestAutoBorderRouteCleanWay;
struct RequestAutoBorderRouteCleanWayBuilder;

struct RequestGoHome;
struct RequestGoHomeBuilder;

struct RequestResumeClean;
struct RequestResumeCleanBuilder;

struct RequestSetBright;
struct RequestSetBrightBuilder;

struct RequestGetBright;
struct RequestGetBrightBuilder;

struct RequestGetVcuData;
struct RequestGetVcuDataBuilder;

struct RequestSlamOptimize;
struct RequestSlamOptimizeBuilder;

struct RequestTestConsumables;
struct RequestTestConsumablesBuilder;

struct RequestCloseEquitment;
struct RequestCloseEquitmentBuilder;

struct RequestLockState;
struct RequestLockStateBuilder;

struct RequestLogin;
struct RequestLoginBuilder;

struct RequestUpdatePwd;
struct RequestUpdatePwdBuilder;

struct RequestUserList;
struct RequestUserListBuilder;

struct Request;
struct RequestBuilder;

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
enum RequestDataField {
  RequestDataField_NONE = 0,
  RequestDataField_RequestSelfTest = 1,
  RequestDataField_RequestHMI = 2,
  RequestDataField_RequestCleanMode = 3,
  RequestDataField_RequestManual = 4,
  RequestDataField_RequestVideo = 5,
  RequestDataField_RequestScanQR = 6,
  RequestDataField_RequestTeachClean = 7,
  RequestDataField_RequestAutoClean = 8,
  RequestDataField_RequestAboutThisMachine = 9,
  RequestDataField_RequestOperationRecord = 10,
  RequestDataField_RequestEquipmentStatus = 11,
  RequestDataField_RequestSiteRoutes = 12,
  RequestDataField_RequestDelRoute = 13,
  RequestDataField_RequestTransSlot = 14,
  RequestDataField_RequestDownloadRoute = 15,
  RequestDataField_RequestVerifyPassword = 16,
  RequestDataField_RequestMachineParams = 17,
  RequestDataField_RequestEquipmentTesting = 18,
  RequestDataField_RequestEquipmentTestingItem = 19,
  RequestDataField_RequestFaultSetting = 20,
  RequestDataField_RequestWorkingMode = 21,
  RequestDataField_RequestWorkingHours = 22,
  RequestDataField_RequestChangePassword = 23,
  RequestDataField_RequestSiteCode = 24,
  RequestDataField_RequestSavingPower = 25,
  RequestDataField_RequestStandby = 26,
  RequestDataField_RequestOneButtonSwitch = 27,
  RequestDataField_RequestPowerDown = 28,
  RequestDataField_RequestMotionControl = 29,
  RequestDataField_RequestSetVolume = 30,
  RequestDataField_RequestGetVolume = 31,
  RequestDataField_RequestEnableWifi = 32,
  RequestDataField_RequestFaultCode = 33,
  RequestDataField_RequestAutoBorderRouteCleanWay = 34,
  RequestDataField_RequestGoHome = 35,
  RequestDataField_RequestResumeClean = 36,
  RequestDataField_RequestSetBright = 37,
  RequestDataField_RequestGetBright = 38,
  RequestDataField_RequestGetVcuData = 39,
  RequestDataField_RequestSlamOptimize = 40,
  RequestDataField_RequestTestConsumables = 41,
  RequestDataField_RequestCloseEquitment = 42,
  RequestDataField_RequestExitStandby = 43,
  RequestDataField_RequestUpdateExceptionConfig = 44,
  RequestDataField_RequestLockState = 45,
  RequestDataField_RequestLogin = 46,
  RequestDataField_RequestUpdatePwd = 47,
  RequestDataField_RequestUserList = 48,
  RequestDataField_MIN = RequestDataField_NONE,
  RequestDataField_MAX = RequestDataField_RequestUserList
};

inline const RequestDataField (&EnumValuesRequestDataField())[49] {
  static const RequestDataField values[] = {
    RequestDataField_NONE,
    RequestDataField_RequestSelfTest,
    RequestDataField_RequestHMI,
    RequestDataField_RequestCleanMode,
    RequestDataField_RequestManual,
    RequestDataField_RequestVideo,
    RequestDataField_RequestScanQR,
    RequestDataField_RequestTeachClean,
    RequestDataField_RequestAutoClean,
    RequestDataField_RequestAboutThisMachine,
    RequestDataField_RequestOperationRecord,
    RequestDataField_RequestEquipmentStatus,
    RequestDataField_RequestSiteRoutes,
    RequestDataField_RequestDelRoute,
    RequestDataField_RequestTransSlot,
    RequestDataField_RequestDownloadRoute,
    RequestDataField_RequestVerifyPassword,
    RequestDataField_RequestMachineParams,
    RequestDataField_RequestEquipmentTesting,
    RequestDataField_RequestEquipmentTestingItem,
    RequestDataField_RequestFaultSetting,
    RequestDataField_RequestWorkingMode,
    RequestDataField_RequestWorkingHours,
    RequestDataField_RequestChangePassword,
    RequestDataField_RequestSiteCode,
    RequestDataField_RequestSavingPower,
    RequestDataField_RequestStandby,
    RequestDataField_RequestOneButtonSwitch,
    RequestDataField_RequestPowerDown,
    RequestDataField_RequestMotionControl,
    RequestDataField_RequestSetVolume,
    RequestDataField_RequestGetVolume,
    RequestDataField_RequestEnableWifi,
    RequestDataField_RequestFaultCode,
    RequestDataField_RequestAutoBorderRouteCleanWay,
    RequestDataField_RequestGoHome,
    RequestDataField_RequestResumeClean,
    RequestDataField_RequestSetBright,
    RequestDataField_RequestGetBright,
    RequestDataField_RequestGetVcuData,
    RequestDataField_RequestSlamOptimize,
    RequestDataField_RequestTestConsumables,
    RequestDataField_RequestCloseEquitment,
    RequestDataField_RequestExitStandby,
    RequestDataField_RequestUpdateExceptionConfig,
    RequestDataField_RequestLockState,
    RequestDataField_RequestLogin,
    RequestDataField_RequestUpdatePwd,
    RequestDataField_RequestUserList
  };
  return values;
}

inline const char * const *EnumNamesRequestDataField() {
  static const char * const names[50] = {
    "NONE",
    "RequestSelfTest",
    "RequestHMI",
    "RequestCleanMode",
    "RequestManual",
    "RequestVideo",
    "RequestScanQR",
    "RequestTeachClean",
    "RequestAutoClean",
    "RequestAboutThisMachine",
    "RequestOperationRecord",
    "RequestEquipmentStatus",
    "RequestSiteRoutes",
    "RequestDelRoute",
    "RequestTransSlot",
    "RequestDownloadRoute",
    "RequestVerifyPassword",
    "RequestMachineParams",
    "RequestEquipmentTesting",
    "RequestEquipmentTestingItem",
    "RequestFaultSetting",
    "RequestWorkingMode",
    "RequestWorkingHours",
    "RequestChangePassword",
    "RequestSiteCode",
    "RequestSavingPower",
    "RequestStandby",
    "RequestOneButtonSwitch",
    "RequestPowerDown",
    "RequestMotionControl",
    "RequestSetVolume",
    "RequestGetVolume",
    "RequestEnableWifi",
    "RequestFaultCode",
    "RequestAutoBorderRouteCleanWay",
    "RequestGoHome",
    "RequestResumeClean",
    "RequestSetBright",
    "RequestGetBright",
    "RequestGetVcuData",
    "RequestSlamOptimize",
    "RequestTestConsumables",
    "RequestCloseEquitment",
    "RequestExitStandby",
    "RequestUpdateExceptionConfig",
    "RequestLockState",
    "RequestLogin",
    "RequestUpdatePwd",
    "RequestUserList",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestDataField(RequestDataField e) {
  if (flatbuffers::IsOutRange(e, RequestDataField_NONE, RequestDataField_RequestUserList)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestDataField()[index];
}

template<typename T> struct RequestDataFieldTraits {
  static const RequestDataField enum_value = RequestDataField_NONE;
};

template<> struct RequestDataFieldTraits<swr::RequestSelfTest> {
  static const RequestDataField enum_value = RequestDataField_RequestSelfTest;
};

template<> struct RequestDataFieldTraits<swr::RequestHMI> {
  static const RequestDataField enum_value = RequestDataField_RequestHMI;
};

template<> struct RequestDataFieldTraits<swr::RequestCleanMode> {
  static const RequestDataField enum_value = RequestDataField_RequestCleanMode;
};

template<> struct RequestDataFieldTraits<swr::RequestManual> {
  static const RequestDataField enum_value = RequestDataField_RequestManual;
};

template<> struct RequestDataFieldTraits<swr::RequestVideo> {
  static const RequestDataField enum_value = RequestDataField_RequestVideo;
};

template<> struct RequestDataFieldTraits<swr::RequestScanQR> {
  static const RequestDataField enum_value = RequestDataField_RequestScanQR;
};

template<> struct RequestDataFieldTraits<swr::RequestTeachClean> {
  static const RequestDataField enum_value = RequestDataField_RequestTeachClean;
};

template<> struct RequestDataFieldTraits<swr::RequestAutoClean> {
  static const RequestDataField enum_value = RequestDataField_RequestAutoClean;
};

template<> struct RequestDataFieldTraits<swr::RequestAboutThisMachine> {
  static const RequestDataField enum_value = RequestDataField_RequestAboutThisMachine;
};

template<> struct RequestDataFieldTraits<swr::RequestOperationRecord> {
  static const RequestDataField enum_value = RequestDataField_RequestOperationRecord;
};

template<> struct RequestDataFieldTraits<swr::RequestEquipmentStatus> {
  static const RequestDataField enum_value = RequestDataField_RequestEquipmentStatus;
};

template<> struct RequestDataFieldTraits<swr::RequestSiteRoutes> {
  static const RequestDataField enum_value = RequestDataField_RequestSiteRoutes;
};

template<> struct RequestDataFieldTraits<swr::RequestDelRoute> {
  static const RequestDataField enum_value = RequestDataField_RequestDelRoute;
};

template<> struct RequestDataFieldTraits<swr::RequestTransSlot> {
  static const RequestDataField enum_value = RequestDataField_RequestTransSlot;
};

template<> struct RequestDataFieldTraits<swr::RequestDownloadRoute> {
  static const RequestDataField enum_value = RequestDataField_RequestDownloadRoute;
};

template<> struct RequestDataFieldTraits<swr::RequestVerifyPassword> {
  static const RequestDataField enum_value = RequestDataField_RequestVerifyPassword;
};

template<> struct RequestDataFieldTraits<swr::RequestMachineParams> {
  static const RequestDataField enum_value = RequestDataField_RequestMachineParams;
};

template<> struct RequestDataFieldTraits<swr::RequestEquipmentTesting> {
  static const RequestDataField enum_value = RequestDataField_RequestEquipmentTesting;
};

template<> struct RequestDataFieldTraits<swr::RequestEquipmentTestingItem> {
  static const RequestDataField enum_value = RequestDataField_RequestEquipmentTestingItem;
};

template<> struct RequestDataFieldTraits<swr::RequestFaultSetting> {
  static const RequestDataField enum_value = RequestDataField_RequestFaultSetting;
};

template<> struct RequestDataFieldTraits<swr::RequestWorkingMode> {
  static const RequestDataField enum_value = RequestDataField_RequestWorkingMode;
};

template<> struct RequestDataFieldTraits<swr::RequestWorkingHours> {
  static const RequestDataField enum_value = RequestDataField_RequestWorkingHours;
};

template<> struct RequestDataFieldTraits<swr::RequestChangePassword> {
  static const RequestDataField enum_value = RequestDataField_RequestChangePassword;
};

template<> struct RequestDataFieldTraits<swr::RequestSiteCode> {
  static const RequestDataField enum_value = RequestDataField_RequestSiteCode;
};

template<> struct RequestDataFieldTraits<swr::RequestSavingPower> {
  static const RequestDataField enum_value = RequestDataField_RequestSavingPower;
};

template<> struct RequestDataFieldTraits<swr::RequestStandby> {
  static const RequestDataField enum_value = RequestDataField_RequestStandby;
};

template<> struct RequestDataFieldTraits<swr::RequestOneButtonSwitch> {
  static const RequestDataField enum_value = RequestDataField_RequestOneButtonSwitch;
};

template<> struct RequestDataFieldTraits<swr::RequestPowerDown> {
  static const RequestDataField enum_value = RequestDataField_RequestPowerDown;
};

template<> struct RequestDataFieldTraits<swr::RequestMotionControl> {
  static const RequestDataField enum_value = RequestDataField_RequestMotionControl;
};

template<> struct RequestDataFieldTraits<swr::RequestSetVolume> {
  static const RequestDataField enum_value = RequestDataField_RequestSetVolume;
};

template<> struct RequestDataFieldTraits<swr::RequestGetVolume> {
  static const RequestDataField enum_value = RequestDataField_RequestGetVolume;
};

template<> struct RequestDataFieldTraits<swr::RequestEnableWifi> {
  static const RequestDataField enum_value = RequestDataField_RequestEnableWifi;
};

template<> struct RequestDataFieldTraits<swr::RequestFaultCode> {
  static const RequestDataField enum_value = RequestDataField_RequestFaultCode;
};

template<> struct RequestDataFieldTraits<swr::RequestAutoBorderRouteCleanWay> {
  static const RequestDataField enum_value = RequestDataField_RequestAutoBorderRouteCleanWay;
};

template<> struct RequestDataFieldTraits<swr::RequestGoHome> {
  static const RequestDataField enum_value = RequestDataField_RequestGoHome;
};

template<> struct RequestDataFieldTraits<swr::RequestResumeClean> {
  static const RequestDataField enum_value = RequestDataField_RequestResumeClean;
};

template<> struct RequestDataFieldTraits<swr::RequestSetBright> {
  static const RequestDataField enum_value = RequestDataField_RequestSetBright;
};

template<> struct RequestDataFieldTraits<swr::RequestGetBright> {
  static const RequestDataField enum_value = RequestDataField_RequestGetBright;
};

template<> struct RequestDataFieldTraits<swr::RequestGetVcuData> {
  static const RequestDataField enum_value = RequestDataField_RequestGetVcuData;
};

template<> struct RequestDataFieldTraits<swr::RequestSlamOptimize> {
  static const RequestDataField enum_value = RequestDataField_RequestSlamOptimize;
};

template<> struct RequestDataFieldTraits<swr::RequestTestConsumables> {
  static const RequestDataField enum_value = RequestDataField_RequestTestConsumables;
};

template<> struct RequestDataFieldTraits<swr::RequestCloseEquitment> {
  static const RequestDataField enum_value = RequestDataField_RequestCloseEquitment;
};

template<> struct RequestDataFieldTraits<swr::RequestExitStandby> {
  static const RequestDataField enum_value = RequestDataField_RequestExitStandby;
};

template<> struct RequestDataFieldTraits<swr::RequestUpdateExceptionConfig> {
  static const RequestDataField enum_value = RequestDataField_RequestUpdateExceptionConfig;
};

template<> struct RequestDataFieldTraits<swr::RequestLockState> {
  static const RequestDataField enum_value = RequestDataField_RequestLockState;
};

template<> struct RequestDataFieldTraits<swr::RequestLogin> {
  static const RequestDataField enum_value = RequestDataField_RequestLogin;
};

template<> struct RequestDataFieldTraits<swr::RequestUpdatePwd> {
  static const RequestDataField enum_value = RequestDataField_RequestUpdatePwd;
};

template<> struct RequestDataFieldTraits<swr::RequestUserList> {
  static const RequestDataField enum_value = RequestDataField_RequestUserList;
};

bool VerifyRequestDataField(flatbuffers::Verifier &verifier, const void *obj, RequestDataField type);
bool VerifyRequestDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
struct RequestSelfTest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestSelfTestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SETTING = 4
  };
  int32_t setting() const {
    return GetField<int32_t>(VT_SETTING, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SETTING) &&
           verifier.EndTable();
  }
};

struct RequestSelfTestBuilder {
  typedef RequestSelfTest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_setting(int32_t setting) {
    fbb_.AddElement<int32_t>(RequestSelfTest::VT_SETTING, setting, 0);
  }
  explicit RequestSelfTestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestSelfTestBuilder &operator=(const RequestSelfTestBuilder &);
  flatbuffers::Offset<RequestSelfTest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestSelfTest>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestSelfTest> CreateRequestSelfTest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t setting = 0) {
  RequestSelfTestBuilder builder_(_fbb);
  builder_.add_setting(setting);
  return builder_.Finish();
}

struct RequestHMI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestHMIBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODEL = 4,
    VT_SERIAL_NUMBER = 6,
    VT_F_W_VERSION = 8,
    VT_H_W_VERSION = 10
  };
  const flatbuffers::String *model() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEL);
  }
  const flatbuffers::String *serial_number() const {
    return GetPointer<const flatbuffers::String *>(VT_SERIAL_NUMBER);
  }
  const flatbuffers::String *f_w_version() const {
    return GetPointer<const flatbuffers::String *>(VT_F_W_VERSION);
  }
  const flatbuffers::String *h_w_version() const {
    return GetPointer<const flatbuffers::String *>(VT_H_W_VERSION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MODEL) &&
           verifier.VerifyString(model()) &&
           VerifyOffset(verifier, VT_SERIAL_NUMBER) &&
           verifier.VerifyString(serial_number()) &&
           VerifyOffset(verifier, VT_F_W_VERSION) &&
           verifier.VerifyString(f_w_version()) &&
           VerifyOffset(verifier, VT_H_W_VERSION) &&
           verifier.VerifyString(h_w_version()) &&
           verifier.EndTable();
  }
};

struct RequestHMIBuilder {
  typedef RequestHMI Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_model(flatbuffers::Offset<flatbuffers::String> model) {
    fbb_.AddOffset(RequestHMI::VT_MODEL, model);
  }
  void add_serial_number(flatbuffers::Offset<flatbuffers::String> serial_number) {
    fbb_.AddOffset(RequestHMI::VT_SERIAL_NUMBER, serial_number);
  }
  void add_f_w_version(flatbuffers::Offset<flatbuffers::String> f_w_version) {
    fbb_.AddOffset(RequestHMI::VT_F_W_VERSION, f_w_version);
  }
  void add_h_w_version(flatbuffers::Offset<flatbuffers::String> h_w_version) {
    fbb_.AddOffset(RequestHMI::VT_H_W_VERSION, h_w_version);
  }
  explicit RequestHMIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestHMIBuilder &operator=(const RequestHMIBuilder &);
  flatbuffers::Offset<RequestHMI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestHMI>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestHMI> CreateRequestHMI(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> model = 0,
    flatbuffers::Offset<flatbuffers::String> serial_number = 0,
    flatbuffers::Offset<flatbuffers::String> f_w_version = 0,
    flatbuffers::Offset<flatbuffers::String> h_w_version = 0) {
  RequestHMIBuilder builder_(_fbb);
  builder_.add_h_w_version(h_w_version);
  builder_.add_f_w_version(f_w_version);
  builder_.add_serial_number(serial_number);
  builder_.add_model(model);
  return builder_.Finish();
}

inline flatbuffers::Offset<RequestHMI> CreateRequestHMIDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *model = nullptr,
    const char *serial_number = nullptr,
    const char *f_w_version = nullptr,
    const char *h_w_version = nullptr) {
  auto model__ = model ? _fbb.CreateString(model) : 0;
  auto serial_number__ = serial_number ? _fbb.CreateString(serial_number) : 0;
  auto f_w_version__ = f_w_version ? _fbb.CreateString(f_w_version) : 0;
  auto h_w_version__ = h_w_version ? _fbb.CreateString(h_w_version) : 0;
  return swr::CreateRequestHMI(
      _fbb,
      model__,
      serial_number__,
      f_w_version__,
      h_w_version__);
}

struct RequestCleanMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestCleanModeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODE = 4
  };
  swr::CleanMode mode() const {
    return static_cast<swr::CleanMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct RequestCleanModeBuilder {
  typedef RequestCleanMode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(swr::CleanMode mode) {
    fbb_.AddElement<int8_t>(RequestCleanMode::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  explicit RequestCleanModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestCleanModeBuilder &operator=(const RequestCleanModeBuilder &);
  flatbuffers::Offset<RequestCleanMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestCleanMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestCleanMode> CreateRequestCleanMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanMode mode = swr::CleanMode_Economize) {
  RequestCleanModeBuilder builder_(_fbb);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct RequestManual FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestManualBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  swr::ManualState state() const {
    return static_cast<swr::ManualState>(GetField<int8_t>(VT_STATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct RequestManualBuilder {
  typedef RequestManual Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(swr::ManualState state) {
    fbb_.AddElement<int8_t>(RequestManual::VT_STATE, static_cast<int8_t>(state), 0);
  }
  explicit RequestManualBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestManualBuilder &operator=(const RequestManualBuilder &);
  flatbuffers::Offset<RequestManual> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestManual>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestManual> CreateRequestManual(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::ManualState state = swr::ManualState_Start) {
  RequestManualBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct RequestVideo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestVideoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct RequestVideoBuilder {
  typedef RequestVideo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(RequestVideo::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit RequestVideoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestVideoBuilder &operator=(const RequestVideoBuilder &);
  flatbuffers::Offset<RequestVideo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestVideo>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestVideo> CreateRequestVideo(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  RequestVideoBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct RequestScanQR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestScanQRBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_STRICT_SCAN = 6
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool strict_scan() const {
    return GetField<uint8_t>(VT_STRICT_SCAN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           VerifyField<uint8_t>(verifier, VT_STRICT_SCAN) &&
           verifier.EndTable();
  }
};

struct RequestScanQRBuilder {
  typedef RequestScanQR Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(RequestScanQR::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  void add_strict_scan(bool strict_scan) {
    fbb_.AddElement<uint8_t>(RequestScanQR::VT_STRICT_SCAN, static_cast<uint8_t>(strict_scan), 0);
  }
  explicit RequestScanQRBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestScanQRBuilder &operator=(const RequestScanQRBuilder &);
  flatbuffers::Offset<RequestScanQR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestScanQR>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestScanQR> CreateRequestScanQR(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false,
    bool strict_scan = false) {
  RequestScanQRBuilder builder_(_fbb);
  builder_.add_strict_scan(strict_scan);
  builder_.add_state(state);
  return builder_.Finish();
}

struct RequestTeachClean FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestTeachCleanBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_PARAM = 6
  };
  swr::CleanState state() const {
    return static_cast<swr::CleanState>(GetField<int8_t>(VT_STATE, 0));
  }
  const swr::TeachCleanParam *param() const {
    return GetPointer<const swr::TeachCleanParam *>(VT_PARAM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_PARAM) &&
           verifier.VerifyTable(param()) &&
           verifier.EndTable();
  }
};

struct RequestTeachCleanBuilder {
  typedef RequestTeachClean Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(swr::CleanState state) {
    fbb_.AddElement<int8_t>(RequestTeachClean::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_param(flatbuffers::Offset<swr::TeachCleanParam> param) {
    fbb_.AddOffset(RequestTeachClean::VT_PARAM, param);
  }
  explicit RequestTeachCleanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestTeachCleanBuilder &operator=(const RequestTeachCleanBuilder &);
  flatbuffers::Offset<RequestTeachClean> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestTeachClean>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestTeachClean> CreateRequestTeachClean(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanState state = swr::CleanState_Start,
    flatbuffers::Offset<swr::TeachCleanParam> param = 0) {
  RequestTeachCleanBuilder builder_(_fbb);
  builder_.add_param(param);
  builder_.add_state(state);
  return builder_.Finish();
}

struct RequestAutoClean FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestAutoCleanBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_PARAM = 6
  };
  swr::CleanState state() const {
    return static_cast<swr::CleanState>(GetField<int8_t>(VT_STATE, 0));
  }
  const swr::AutoCleanParam *param() const {
    return GetPointer<const swr::AutoCleanParam *>(VT_PARAM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_PARAM) &&
           verifier.VerifyTable(param()) &&
           verifier.EndTable();
  }
};

struct RequestAutoCleanBuilder {
  typedef RequestAutoClean Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(swr::CleanState state) {
    fbb_.AddElement<int8_t>(RequestAutoClean::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_param(flatbuffers::Offset<swr::AutoCleanParam> param) {
    fbb_.AddOffset(RequestAutoClean::VT_PARAM, param);
  }
  explicit RequestAutoCleanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestAutoCleanBuilder &operator=(const RequestAutoCleanBuilder &);
  flatbuffers::Offset<RequestAutoClean> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestAutoClean>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestAutoClean> CreateRequestAutoClean(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::CleanState state = swr::CleanState_Start,
    flatbuffers::Offset<swr::AutoCleanParam> param = 0) {
  RequestAutoCleanBuilder builder_(_fbb);
  builder_.add_param(param);
  builder_.add_state(state);
  return builder_.Finish();
}

struct RequestAboutThisMachine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestAboutThisMachineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SETTING = 4
  };
  int32_t setting() const {
    return GetField<int32_t>(VT_SETTING, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SETTING) &&
           verifier.EndTable();
  }
};

struct RequestAboutThisMachineBuilder {
  typedef RequestAboutThisMachine Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_setting(int32_t setting) {
    fbb_.AddElement<int32_t>(RequestAboutThisMachine::VT_SETTING, setting, 0);
  }
  explicit RequestAboutThisMachineBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestAboutThisMachineBuilder &operator=(const RequestAboutThisMachineBuilder &);
  flatbuffers::Offset<RequestAboutThisMachine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestAboutThisMachine>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestAboutThisMachine> CreateRequestAboutThisMachine(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t setting = 0) {
  RequestAboutThisMachineBuilder builder_(_fbb);
  builder_.add_setting(setting);
  return builder_.Finish();
}

struct RequestOperationRecord FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestOperationRecordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SETTING = 4
  };
  int32_t setting() const {
    return GetField<int32_t>(VT_SETTING, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SETTING) &&
           verifier.EndTable();
  }
};

struct RequestOperationRecordBuilder {
  typedef RequestOperationRecord Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_setting(int32_t setting) {
    fbb_.AddElement<int32_t>(RequestOperationRecord::VT_SETTING, setting, 0);
  }
  explicit RequestOperationRecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestOperationRecordBuilder &operator=(const RequestOperationRecordBuilder &);
  flatbuffers::Offset<RequestOperationRecord> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestOperationRecord>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestOperationRecord> CreateRequestOperationRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t setting = 0) {
  RequestOperationRecordBuilder builder_(_fbb);
  builder_.add_setting(setting);
  return builder_.Finish();
}

struct RequestEquipmentStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestEquipmentStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFRESH = 4,
    VT_TYPE = 6
  };
  bool refresh() const {
    return GetField<uint8_t>(VT_REFRESH, 0) != 0;
  }
  swr::EquipmentUnitType type() const {
    return static_cast<swr::EquipmentUnitType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REFRESH) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct RequestEquipmentStatusBuilder {
  typedef RequestEquipmentStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_refresh(bool refresh) {
    fbb_.AddElement<uint8_t>(RequestEquipmentStatus::VT_REFRESH, static_cast<uint8_t>(refresh), 0);
  }
  void add_type(swr::EquipmentUnitType type) {
    fbb_.AddElement<int8_t>(RequestEquipmentStatus::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit RequestEquipmentStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestEquipmentStatusBuilder &operator=(const RequestEquipmentStatusBuilder &);
  flatbuffers::Offset<RequestEquipmentStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestEquipmentStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestEquipmentStatus> CreateRequestEquipmentStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool refresh = false,
    swr::EquipmentUnitType type = swr::EquipmentUnitType_Core) {
  RequestEquipmentStatusBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_refresh(refresh);
  return builder_.Finish();
}

struct RequestSiteRoutes FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestSiteRoutesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SITE_CODE = 4
  };
  const flatbuffers::String *site_code() const {
    return GetPointer<const flatbuffers::String *>(VT_SITE_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SITE_CODE) &&
           verifier.VerifyString(site_code()) &&
           verifier.EndTable();
  }
};

struct RequestSiteRoutesBuilder {
  typedef RequestSiteRoutes Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_site_code(flatbuffers::Offset<flatbuffers::String> site_code) {
    fbb_.AddOffset(RequestSiteRoutes::VT_SITE_CODE, site_code);
  }
  explicit RequestSiteRoutesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestSiteRoutesBuilder &operator=(const RequestSiteRoutesBuilder &);
  flatbuffers::Offset<RequestSiteRoutes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestSiteRoutes>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestSiteRoutes> CreateRequestSiteRoutes(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> site_code = 0) {
  RequestSiteRoutesBuilder builder_(_fbb);
  builder_.add_site_code(site_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<RequestSiteRoutes> CreateRequestSiteRoutesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *site_code = nullptr) {
  auto site_code__ = site_code ? _fbb.CreateString(site_code) : 0;
  return swr::CreateRequestSiteRoutes(
      _fbb,
      site_code__);
}

struct RequestDelRoute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestDelRouteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROUTE = 4
  };
  const swr::RouteIdent *route() const {
    return GetPointer<const swr::RouteIdent *>(VT_ROUTE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROUTE) &&
           verifier.VerifyTable(route()) &&
           verifier.EndTable();
  }
};

struct RequestDelRouteBuilder {
  typedef RequestDelRoute Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_route(flatbuffers::Offset<swr::RouteIdent> route) {
    fbb_.AddOffset(RequestDelRoute::VT_ROUTE, route);
  }
  explicit RequestDelRouteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestDelRouteBuilder &operator=(const RequestDelRouteBuilder &);
  flatbuffers::Offset<RequestDelRoute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestDelRoute>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestDelRoute> CreateRequestDelRoute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<swr::RouteIdent> route = 0) {
  RequestDelRouteBuilder builder_(_fbb);
  builder_.add_route(route);
  return builder_.Finish();
}

struct RequestTransSlot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestTransSlotBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROUTE = 4,
    VT_NEW_SLOT = 6
  };
  const swr::RouteIdent *route() const {
    return GetPointer<const swr::RouteIdent *>(VT_ROUTE);
  }
  uint8_t new_slot() const {
    return GetField<uint8_t>(VT_NEW_SLOT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROUTE) &&
           verifier.VerifyTable(route()) &&
           VerifyField<uint8_t>(verifier, VT_NEW_SLOT) &&
           verifier.EndTable();
  }
};

struct RequestTransSlotBuilder {
  typedef RequestTransSlot Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_route(flatbuffers::Offset<swr::RouteIdent> route) {
    fbb_.AddOffset(RequestTransSlot::VT_ROUTE, route);
  }
  void add_new_slot(uint8_t new_slot) {
    fbb_.AddElement<uint8_t>(RequestTransSlot::VT_NEW_SLOT, new_slot, 0);
  }
  explicit RequestTransSlotBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestTransSlotBuilder &operator=(const RequestTransSlotBuilder &);
  flatbuffers::Offset<RequestTransSlot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestTransSlot>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestTransSlot> CreateRequestTransSlot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<swr::RouteIdent> route = 0,
    uint8_t new_slot = 0) {
  RequestTransSlotBuilder builder_(_fbb);
  builder_.add_route(route);
  builder_.add_new_slot(new_slot);
  return builder_.Finish();
}

struct RequestDownloadRoute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestDownloadRouteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROUTE = 4
  };
  const swr::RouteIdent *route() const {
    return GetPointer<const swr::RouteIdent *>(VT_ROUTE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROUTE) &&
           verifier.VerifyTable(route()) &&
           verifier.EndTable();
  }
};

struct RequestDownloadRouteBuilder {
  typedef RequestDownloadRoute Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_route(flatbuffers::Offset<swr::RouteIdent> route) {
    fbb_.AddOffset(RequestDownloadRoute::VT_ROUTE, route);
  }
  explicit RequestDownloadRouteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestDownloadRouteBuilder &operator=(const RequestDownloadRouteBuilder &);
  flatbuffers::Offset<RequestDownloadRoute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestDownloadRoute>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestDownloadRoute> CreateRequestDownloadRoute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<swr::RouteIdent> route = 0) {
  RequestDownloadRouteBuilder builder_(_fbb);
  builder_.add_route(route);
  return builder_.Finish();
}

struct RequestVerifyPassword FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestVerifyPasswordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PWD = 4
  };
  const flatbuffers::String *pwd() const {
    return GetPointer<const flatbuffers::String *>(VT_PWD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PWD) &&
           verifier.VerifyString(pwd()) &&
           verifier.EndTable();
  }
};

struct RequestVerifyPasswordBuilder {
  typedef RequestVerifyPassword Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pwd(flatbuffers::Offset<flatbuffers::String> pwd) {
    fbb_.AddOffset(RequestVerifyPassword::VT_PWD, pwd);
  }
  explicit RequestVerifyPasswordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestVerifyPasswordBuilder &operator=(const RequestVerifyPasswordBuilder &);
  flatbuffers::Offset<RequestVerifyPassword> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestVerifyPassword>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestVerifyPassword> CreateRequestVerifyPassword(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> pwd = 0) {
  RequestVerifyPasswordBuilder builder_(_fbb);
  builder_.add_pwd(pwd);
  return builder_.Finish();
}

inline flatbuffers::Offset<RequestVerifyPassword> CreateRequestVerifyPasswordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *pwd = nullptr) {
  auto pwd__ = pwd ? _fbb.CreateString(pwd) : 0;
  return swr::CreateRequestVerifyPassword(
      _fbb,
      pwd__);
}

struct RequestMachineParams FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestMachineParamsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_SETTING = 6
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  const swr::MachineParamRqst *setting() const {
    return GetPointer<const swr::MachineParamRqst *>(VT_SETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyOffset(verifier, VT_SETTING) &&
           verifier.VerifyTable(setting()) &&
           verifier.EndTable();
  }
};

struct RequestMachineParamsBuilder {
  typedef RequestMachineParams Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(RequestMachineParams::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_setting(flatbuffers::Offset<swr::MachineParamRqst> setting) {
    fbb_.AddOffset(RequestMachineParams::VT_SETTING, setting);
  }
  explicit RequestMachineParamsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestMachineParamsBuilder &operator=(const RequestMachineParamsBuilder &);
  flatbuffers::Offset<RequestMachineParams> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestMachineParams>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestMachineParams> CreateRequestMachineParams(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    flatbuffers::Offset<swr::MachineParamRqst> setting = 0) {
  RequestMachineParamsBuilder builder_(_fbb);
  builder_.add_setting(setting);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct RequestEquipmentTesting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestEquipmentTestingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct RequestEquipmentTestingBuilder {
  typedef RequestEquipmentTesting Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(RequestEquipmentTesting::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit RequestEquipmentTestingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestEquipmentTestingBuilder &operator=(const RequestEquipmentTestingBuilder &);
  flatbuffers::Offset<RequestEquipmentTesting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestEquipmentTesting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestEquipmentTesting> CreateRequestEquipmentTesting(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  RequestEquipmentTestingBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct RequestEquipmentTestingItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestEquipmentTestingItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  swr::TestingItemType type() const {
    return static_cast<swr::TestingItemType>(GetField<int8_t>(VT_TYPE, 0));
  }
  swr::TestingItemData data_type() const {
    return static_cast<swr::TestingItemData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const swr::Switch *data_as_Switch() const {
    return data_type() == swr::TestingItemData_Switch ? static_cast<const swr::Switch *>(data()) : nullptr;
  }
  const swr::WirePusher *data_as_WirePusher() const {
    return data_type() == swr::TestingItemData_WirePusher ? static_cast<const swr::WirePusher *>(data()) : nullptr;
  }
  const swr::WaterPumpGear *data_as_WaterPumpGear() const {
    return data_type() == swr::TestingItemData_WaterPumpGear ? static_cast<const swr::WaterPumpGear *>(data()) : nullptr;
  }
  const swr::Brake *data_as_Brake() const {
    return data_type() == swr::TestingItemData_Brake ? static_cast<const swr::Brake *>(data()) : nullptr;
  }
  const swr::LightBelt *data_as_LightBelt() const {
    return data_type() == swr::TestingItemData_LightBelt ? static_cast<const swr::LightBelt *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyTestingItemData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const swr::Switch *RequestEquipmentTestingItem::data_as<swr::Switch>() const {
  return data_as_Switch();
}

template<> inline const swr::WirePusher *RequestEquipmentTestingItem::data_as<swr::WirePusher>() const {
  return data_as_WirePusher();
}

template<> inline const swr::WaterPumpGear *RequestEquipmentTestingItem::data_as<swr::WaterPumpGear>() const {
  return data_as_WaterPumpGear();
}

template<> inline const swr::Brake *RequestEquipmentTestingItem::data_as<swr::Brake>() const {
  return data_as_Brake();
}

template<> inline const swr::LightBelt *RequestEquipmentTestingItem::data_as<swr::LightBelt>() const {
  return data_as_LightBelt();
}

struct RequestEquipmentTestingItemBuilder {
  typedef RequestEquipmentTestingItem Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(swr::TestingItemType type) {
    fbb_.AddElement<int8_t>(RequestEquipmentTestingItem::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_data_type(swr::TestingItemData data_type) {
    fbb_.AddElement<uint8_t>(RequestEquipmentTestingItem::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(RequestEquipmentTestingItem::VT_DATA, data);
  }
  explicit RequestEquipmentTestingItemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestEquipmentTestingItemBuilder &operator=(const RequestEquipmentTestingItemBuilder &);
  flatbuffers::Offset<RequestEquipmentTestingItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestEquipmentTestingItem>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestEquipmentTestingItem> CreateRequestEquipmentTestingItem(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::TestingItemType type = swr::TestingItemType_MainBrushMotor,
    swr::TestingItemData data_type = swr::TestingItemData_NONE,
    flatbuffers::Offset<void> data = 0) {
  RequestEquipmentTestingItemBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_type(type);
  return builder_.Finish();
}

struct RequestFaultSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestFaultSettingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  swr::FaultSettingRqst data_type() const {
    return static_cast<swr::FaultSettingRqst>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const swr::Switch *data_as_Switch() const {
    return data_type() == swr::FaultSettingRqst_Switch ? static_cast<const swr::Switch *>(data()) : nullptr;
  }
  const swr::FaultSettingData *data_as_FaultSettingData() const {
    return data_type() == swr::FaultSettingRqst_FaultSettingData ? static_cast<const swr::FaultSettingData *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyFaultSettingRqst(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const swr::Switch *RequestFaultSetting::data_as<swr::Switch>() const {
  return data_as_Switch();
}

template<> inline const swr::FaultSettingData *RequestFaultSetting::data_as<swr::FaultSettingData>() const {
  return data_as_FaultSettingData();
}

struct RequestFaultSettingBuilder {
  typedef RequestFaultSetting Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(RequestFaultSetting::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_data_type(swr::FaultSettingRqst data_type) {
    fbb_.AddElement<uint8_t>(RequestFaultSetting::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(RequestFaultSetting::VT_DATA, data);
  }
  explicit RequestFaultSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestFaultSettingBuilder &operator=(const RequestFaultSettingBuilder &);
  flatbuffers::Offset<RequestFaultSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestFaultSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestFaultSetting> CreateRequestFaultSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    swr::FaultSettingRqst data_type = swr::FaultSettingRqst_NONE,
    flatbuffers::Offset<void> data = 0) {
  RequestFaultSettingBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct RequestWorkingMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestWorkingModeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_PARAM = 6
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  const swr::ParamData *param() const {
    return GetPointer<const swr::ParamData *>(VT_PARAM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyOffset(verifier, VT_PARAM) &&
           verifier.VerifyTable(param()) &&
           verifier.EndTable();
  }
};

struct RequestWorkingModeBuilder {
  typedef RequestWorkingMode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(RequestWorkingMode::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_param(flatbuffers::Offset<swr::ParamData> param) {
    fbb_.AddOffset(RequestWorkingMode::VT_PARAM, param);
  }
  explicit RequestWorkingModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestWorkingModeBuilder &operator=(const RequestWorkingModeBuilder &);
  flatbuffers::Offset<RequestWorkingMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestWorkingMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestWorkingMode> CreateRequestWorkingMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    flatbuffers::Offset<swr::ParamData> param = 0) {
  RequestWorkingModeBuilder builder_(_fbb);
  builder_.add_param(param);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct RequestWorkingHours FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestWorkingHoursBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPER = 4,
    VT_PARAM = 6
  };
  swr::OperType oper() const {
    return static_cast<swr::OperType>(GetField<int8_t>(VT_OPER, 0));
  }
  const swr::ParamData *param() const {
    return GetPointer<const swr::ParamData *>(VT_PARAM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPER) &&
           VerifyOffset(verifier, VT_PARAM) &&
           verifier.VerifyTable(param()) &&
           verifier.EndTable();
  }
};

struct RequestWorkingHoursBuilder {
  typedef RequestWorkingHours Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oper(swr::OperType oper) {
    fbb_.AddElement<int8_t>(RequestWorkingHours::VT_OPER, static_cast<int8_t>(oper), 0);
  }
  void add_param(flatbuffers::Offset<swr::ParamData> param) {
    fbb_.AddOffset(RequestWorkingHours::VT_PARAM, param);
  }
  explicit RequestWorkingHoursBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestWorkingHoursBuilder &operator=(const RequestWorkingHoursBuilder &);
  flatbuffers::Offset<RequestWorkingHours> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestWorkingHours>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestWorkingHours> CreateRequestWorkingHours(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::OperType oper = swr::OperType_Get,
    flatbuffers::Offset<swr::ParamData> param = 0) {
  RequestWorkingHoursBuilder builder_(_fbb);
  builder_.add_param(param);
  builder_.add_oper(oper);
  return builder_.Finish();
}

struct RequestChangePassword FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestChangePasswordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OLD_PWD = 4,
    VT_NEW_PWD = 6
  };
  const flatbuffers::String *old_pwd() const {
    return GetPointer<const flatbuffers::String *>(VT_OLD_PWD);
  }
  const flatbuffers::String *new_pwd() const {
    return GetPointer<const flatbuffers::String *>(VT_NEW_PWD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OLD_PWD) &&
           verifier.VerifyString(old_pwd()) &&
           VerifyOffset(verifier, VT_NEW_PWD) &&
           verifier.VerifyString(new_pwd()) &&
           verifier.EndTable();
  }
};

struct RequestChangePasswordBuilder {
  typedef RequestChangePassword Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_old_pwd(flatbuffers::Offset<flatbuffers::String> old_pwd) {
    fbb_.AddOffset(RequestChangePassword::VT_OLD_PWD, old_pwd);
  }
  void add_new_pwd(flatbuffers::Offset<flatbuffers::String> new_pwd) {
    fbb_.AddOffset(RequestChangePassword::VT_NEW_PWD, new_pwd);
  }
  explicit RequestChangePasswordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestChangePasswordBuilder &operator=(const RequestChangePasswordBuilder &);
  flatbuffers::Offset<RequestChangePassword> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestChangePassword>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestChangePassword> CreateRequestChangePassword(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> old_pwd = 0,
    flatbuffers::Offset<flatbuffers::String> new_pwd = 0) {
  RequestChangePasswordBuilder builder_(_fbb);
  builder_.add_new_pwd(new_pwd);
  builder_.add_old_pwd(old_pwd);
  return builder_.Finish();
}

inline flatbuffers::Offset<RequestChangePassword> CreateRequestChangePasswordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *old_pwd = nullptr,
    const char *new_pwd = nullptr) {
  auto old_pwd__ = old_pwd ? _fbb.CreateString(old_pwd) : 0;
  auto new_pwd__ = new_pwd ? _fbb.CreateString(new_pwd) : 0;
  return swr::CreateRequestChangePassword(
      _fbb,
      old_pwd__,
      new_pwd__);
}

struct RequestSiteCode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestSiteCodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestSiteCodeBuilder {
  typedef RequestSiteCode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestSiteCode::VT_ANY, any, 0);
  }
  explicit RequestSiteCodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestSiteCodeBuilder &operator=(const RequestSiteCodeBuilder &);
  flatbuffers::Offset<RequestSiteCode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestSiteCode>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestSiteCode> CreateRequestSiteCode(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestSiteCodeBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestSavingPower FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestSavingPowerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestSavingPowerBuilder {
  typedef RequestSavingPower Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestSavingPower::VT_ANY, any, 0);
  }
  explicit RequestSavingPowerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestSavingPowerBuilder &operator=(const RequestSavingPowerBuilder &);
  flatbuffers::Offset<RequestSavingPower> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestSavingPower>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestSavingPower> CreateRequestSavingPower(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestSavingPowerBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestStandby FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestStandbyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestStandbyBuilder {
  typedef RequestStandby Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestStandby::VT_ANY, any, 0);
  }
  explicit RequestStandbyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestStandbyBuilder &operator=(const RequestStandbyBuilder &);
  flatbuffers::Offset<RequestStandby> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestStandby>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestStandby> CreateRequestStandby(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestStandbyBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestExitStandby FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestExitStandbyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestExitStandbyBuilder {
  typedef RequestExitStandby Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestExitStandby::VT_ANY, any, 0);
  }
  explicit RequestExitStandbyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestExitStandbyBuilder &operator=(const RequestExitStandbyBuilder &);
  flatbuffers::Offset<RequestExitStandby> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestExitStandby>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestExitStandby> CreateRequestExitStandby(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestExitStandbyBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestUpdateExceptionConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestUpdateExceptionConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestUpdateExceptionConfigBuilder {
  typedef RequestUpdateExceptionConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestUpdateExceptionConfig::VT_ANY, any, 0);
  }
  explicit RequestUpdateExceptionConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestUpdateExceptionConfigBuilder &operator=(const RequestUpdateExceptionConfigBuilder &);
  flatbuffers::Offset<RequestUpdateExceptionConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestUpdateExceptionConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestUpdateExceptionConfig> CreateRequestUpdateExceptionConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestUpdateExceptionConfigBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestOneButtonSwitch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestOneButtonSwitchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct RequestOneButtonSwitchBuilder {
  typedef RequestOneButtonSwitch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(RequestOneButtonSwitch::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit RequestOneButtonSwitchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestOneButtonSwitchBuilder &operator=(const RequestOneButtonSwitchBuilder &);
  flatbuffers::Offset<RequestOneButtonSwitch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestOneButtonSwitch>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestOneButtonSwitch> CreateRequestOneButtonSwitch(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  RequestOneButtonSwitchBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct RequestPowerDown FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestPowerDownBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POWER_DOWN = 4
  };
  bool power_down() const {
    return GetField<uint8_t>(VT_POWER_DOWN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_POWER_DOWN) &&
           verifier.EndTable();
  }
};

struct RequestPowerDownBuilder {
  typedef RequestPowerDown Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_power_down(bool power_down) {
    fbb_.AddElement<uint8_t>(RequestPowerDown::VT_POWER_DOWN, static_cast<uint8_t>(power_down), 0);
  }
  explicit RequestPowerDownBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestPowerDownBuilder &operator=(const RequestPowerDownBuilder &);
  flatbuffers::Offset<RequestPowerDown> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestPowerDown>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestPowerDown> CreateRequestPowerDown(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool power_down = false) {
  RequestPowerDownBuilder builder_(_fbb);
  builder_.add_power_down(power_down);
  return builder_.Finish();
}

struct RequestMotionControl FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestMotionControlBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LINEAR = 4,
    VT_ANGULAR = 6
  };
  float linear() const {
    return GetField<float>(VT_LINEAR, 0.0f);
  }
  float angular() const {
    return GetField<float>(VT_ANGULAR, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_LINEAR) &&
           VerifyField<float>(verifier, VT_ANGULAR) &&
           verifier.EndTable();
  }
};

struct RequestMotionControlBuilder {
  typedef RequestMotionControl Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_linear(float linear) {
    fbb_.AddElement<float>(RequestMotionControl::VT_LINEAR, linear, 0.0f);
  }
  void add_angular(float angular) {
    fbb_.AddElement<float>(RequestMotionControl::VT_ANGULAR, angular, 0.0f);
  }
  explicit RequestMotionControlBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestMotionControlBuilder &operator=(const RequestMotionControlBuilder &);
  flatbuffers::Offset<RequestMotionControl> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestMotionControl>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestMotionControl> CreateRequestMotionControl(
    flatbuffers::FlatBufferBuilder &_fbb,
    float linear = 0.0f,
    float angular = 0.0f) {
  RequestMotionControlBuilder builder_(_fbb);
  builder_.add_angular(angular);
  builder_.add_linear(linear);
  return builder_.Finish();
}

struct RequestSetVolume FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestSetVolumeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VOLUME = 4
  };
  int32_t volume() const {
    return GetField<int32_t>(VT_VOLUME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VOLUME) &&
           verifier.EndTable();
  }
};

struct RequestSetVolumeBuilder {
  typedef RequestSetVolume Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_volume(int32_t volume) {
    fbb_.AddElement<int32_t>(RequestSetVolume::VT_VOLUME, volume, 0);
  }
  explicit RequestSetVolumeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestSetVolumeBuilder &operator=(const RequestSetVolumeBuilder &);
  flatbuffers::Offset<RequestSetVolume> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestSetVolume>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestSetVolume> CreateRequestSetVolume(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t volume = 0) {
  RequestSetVolumeBuilder builder_(_fbb);
  builder_.add_volume(volume);
  return builder_.Finish();
}

struct RequestGetVolume FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestGetVolumeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestGetVolumeBuilder {
  typedef RequestGetVolume Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestGetVolume::VT_ANY, any, 0);
  }
  explicit RequestGetVolumeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestGetVolumeBuilder &operator=(const RequestGetVolumeBuilder &);
  flatbuffers::Offset<RequestGetVolume> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestGetVolume>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestGetVolume> CreateRequestGetVolume(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestGetVolumeBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestEnableWifi FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestEnableWifiBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLE = 4
  };
  bool enable() const {
    return GetField<uint8_t>(VT_ENABLE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE) &&
           verifier.EndTable();
  }
};

struct RequestEnableWifiBuilder {
  typedef RequestEnableWifi Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_enable(bool enable) {
    fbb_.AddElement<uint8_t>(RequestEnableWifi::VT_ENABLE, static_cast<uint8_t>(enable), 0);
  }
  explicit RequestEnableWifiBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestEnableWifiBuilder &operator=(const RequestEnableWifiBuilder &);
  flatbuffers::Offset<RequestEnableWifi> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestEnableWifi>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestEnableWifi> CreateRequestEnableWifi(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool enable = false) {
  RequestEnableWifiBuilder builder_(_fbb);
  builder_.add_enable(enable);
  return builder_.Finish();
}

struct RequestFaultCode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestFaultCodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FAULT = 4
  };
  const swr::FaultCode *fault() const {
    return GetStruct<const swr::FaultCode *>(VT_FAULT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<swr::FaultCode>(verifier, VT_FAULT) &&
           verifier.EndTable();
  }
};

struct RequestFaultCodeBuilder {
  typedef RequestFaultCode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fault(const swr::FaultCode *fault) {
    fbb_.AddStruct(RequestFaultCode::VT_FAULT, fault);
  }
  explicit RequestFaultCodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestFaultCodeBuilder &operator=(const RequestFaultCodeBuilder &);
  flatbuffers::Offset<RequestFaultCode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestFaultCode>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestFaultCode> CreateRequestFaultCode(
    flatbuffers::FlatBufferBuilder &_fbb,
    const swr::FaultCode *fault = 0) {
  RequestFaultCodeBuilder builder_(_fbb);
  builder_.add_fault(fault);
  return builder_.Finish();
}

struct RequestAutoBorderRouteCleanWay FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestAutoBorderRouteCleanWayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLEAN_WAY = 4
  };
  const swr::AutoBorderRouteCleanWay *clean_way() const {
    return GetPointer<const swr::AutoBorderRouteCleanWay *>(VT_CLEAN_WAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLEAN_WAY) &&
           verifier.VerifyTable(clean_way()) &&
           verifier.EndTable();
  }
};

struct RequestAutoBorderRouteCleanWayBuilder {
  typedef RequestAutoBorderRouteCleanWay Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clean_way(flatbuffers::Offset<swr::AutoBorderRouteCleanWay> clean_way) {
    fbb_.AddOffset(RequestAutoBorderRouteCleanWay::VT_CLEAN_WAY, clean_way);
  }
  explicit RequestAutoBorderRouteCleanWayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestAutoBorderRouteCleanWayBuilder &operator=(const RequestAutoBorderRouteCleanWayBuilder &);
  flatbuffers::Offset<RequestAutoBorderRouteCleanWay> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestAutoBorderRouteCleanWay>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestAutoBorderRouteCleanWay> CreateRequestAutoBorderRouteCleanWay(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<swr::AutoBorderRouteCleanWay> clean_way = 0) {
  RequestAutoBorderRouteCleanWayBuilder builder_(_fbb);
  builder_.add_clean_way(clean_way);
  return builder_.Finish();
}

struct RequestGoHome FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestGoHomeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestGoHomeBuilder {
  typedef RequestGoHome Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestGoHome::VT_ANY, any, 0);
  }
  explicit RequestGoHomeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestGoHomeBuilder &operator=(const RequestGoHomeBuilder &);
  flatbuffers::Offset<RequestGoHome> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestGoHome>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestGoHome> CreateRequestGoHome(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestGoHomeBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestResumeClean FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestResumeCleanBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestResumeCleanBuilder {
  typedef RequestResumeClean Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestResumeClean::VT_ANY, any, 0);
  }
  explicit RequestResumeCleanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestResumeCleanBuilder &operator=(const RequestResumeCleanBuilder &);
  flatbuffers::Offset<RequestResumeClean> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestResumeClean>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestResumeClean> CreateRequestResumeClean(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestResumeCleanBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestSetBright FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestSetBrightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BRIGHT = 4
  };
  uint32_t bright() const {
    return GetField<uint32_t>(VT_BRIGHT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_BRIGHT) &&
           verifier.EndTable();
  }
};

struct RequestSetBrightBuilder {
  typedef RequestSetBright Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bright(uint32_t bright) {
    fbb_.AddElement<uint32_t>(RequestSetBright::VT_BRIGHT, bright, 0);
  }
  explicit RequestSetBrightBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestSetBrightBuilder &operator=(const RequestSetBrightBuilder &);
  flatbuffers::Offset<RequestSetBright> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestSetBright>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestSetBright> CreateRequestSetBright(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t bright = 0) {
  RequestSetBrightBuilder builder_(_fbb);
  builder_.add_bright(bright);
  return builder_.Finish();
}

struct RequestGetBright FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestGetBrightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  uint32_t any() const {
    return GetField<uint32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestGetBrightBuilder {
  typedef RequestGetBright Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(uint32_t any) {
    fbb_.AddElement<uint32_t>(RequestGetBright::VT_ANY, any, 0);
  }
  explicit RequestGetBrightBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestGetBrightBuilder &operator=(const RequestGetBrightBuilder &);
  flatbuffers::Offset<RequestGetBright> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestGetBright>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestGetBright> CreateRequestGetBright(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t any = 0) {
  RequestGetBrightBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestGetVcuData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestGetVcuDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REG_ID = 4
  };
  const flatbuffers::Vector<uint16_t> *reg_id() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_REG_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REG_ID) &&
           verifier.VerifyVector(reg_id()) &&
           verifier.EndTable();
  }
};

struct RequestGetVcuDataBuilder {
  typedef RequestGetVcuData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reg_id(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> reg_id) {
    fbb_.AddOffset(RequestGetVcuData::VT_REG_ID, reg_id);
  }
  explicit RequestGetVcuDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestGetVcuDataBuilder &operator=(const RequestGetVcuDataBuilder &);
  flatbuffers::Offset<RequestGetVcuData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestGetVcuData>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestGetVcuData> CreateRequestGetVcuData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> reg_id = 0) {
  RequestGetVcuDataBuilder builder_(_fbb);
  builder_.add_reg_id(reg_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<RequestGetVcuData> CreateRequestGetVcuDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *reg_id = nullptr) {
  auto reg_id__ = reg_id ? _fbb.CreateVector<uint16_t>(*reg_id) : 0;
  return swr::CreateRequestGetVcuData(
      _fbb,
      reg_id__);
}

struct RequestSlamOptimize FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestSlamOptimizeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestSlamOptimizeBuilder {
  typedef RequestSlamOptimize Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestSlamOptimize::VT_ANY, any, 0);
  }
  explicit RequestSlamOptimizeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestSlamOptimizeBuilder &operator=(const RequestSlamOptimizeBuilder &);
  flatbuffers::Offset<RequestSlamOptimize> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestSlamOptimize>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestSlamOptimize> CreateRequestSlamOptimize(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestSlamOptimizeBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestTestConsumables FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestTestConsumablesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestTestConsumablesBuilder {
  typedef RequestTestConsumables Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestTestConsumables::VT_ANY, any, 0);
  }
  explicit RequestTestConsumablesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestTestConsumablesBuilder &operator=(const RequestTestConsumablesBuilder &);
  flatbuffers::Offset<RequestTestConsumables> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestTestConsumables>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestTestConsumables> CreateRequestTestConsumables(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestTestConsumablesBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestCloseEquitment FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestCloseEquitmentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestCloseEquitmentBuilder {
  typedef RequestCloseEquitment Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestCloseEquitment::VT_ANY, any, 0);
  }
  explicit RequestCloseEquitmentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestCloseEquitmentBuilder &operator=(const RequestCloseEquitmentBuilder &);
  flatbuffers::Offset<RequestCloseEquitment> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestCloseEquitment>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestCloseEquitment> CreateRequestCloseEquitment(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestCloseEquitmentBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestLockState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestLockStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestLockStateBuilder {
  typedef RequestLockState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestLockState::VT_ANY, any, 0);
  }
  explicit RequestLockStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestLockStateBuilder &operator=(const RequestLockStateBuilder &);
  flatbuffers::Offset<RequestLockState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestLockState>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestLockState> CreateRequestLockState(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestLockStateBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

struct RequestLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PWD = 6
  };
  swr::LoginType type() const {
    return static_cast<swr::LoginType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *pwd() const {
    return GetPointer<const flatbuffers::String *>(VT_PWD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_PWD) &&
           verifier.VerifyString(pwd()) &&
           verifier.EndTable();
  }
};

struct RequestLoginBuilder {
  typedef RequestLogin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(swr::LoginType type) {
    fbb_.AddElement<int8_t>(RequestLogin::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_pwd(flatbuffers::Offset<flatbuffers::String> pwd) {
    fbb_.AddOffset(RequestLogin::VT_PWD, pwd);
  }
  explicit RequestLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestLoginBuilder &operator=(const RequestLoginBuilder &);
  flatbuffers::Offset<RequestLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestLogin>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestLogin> CreateRequestLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::LoginType type = swr::LoginType_HmiUser,
    flatbuffers::Offset<flatbuffers::String> pwd = 0) {
  RequestLoginBuilder builder_(_fbb);
  builder_.add_pwd(pwd);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<RequestLogin> CreateRequestLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::LoginType type = swr::LoginType_HmiUser,
    const char *pwd = nullptr) {
  auto pwd__ = pwd ? _fbb.CreateString(pwd) : 0;
  return swr::CreateRequestLogin(
      _fbb,
      type,
      pwd__);
}

struct RequestUpdatePwd FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestUpdatePwdBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER = 4
  };
  const swr::LoginUser *user() const {
    return GetPointer<const swr::LoginUser *>(VT_USER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           verifier.EndTable();
  }
};

struct RequestUpdatePwdBuilder {
  typedef RequestUpdatePwd Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user(flatbuffers::Offset<swr::LoginUser> user) {
    fbb_.AddOffset(RequestUpdatePwd::VT_USER, user);
  }
  explicit RequestUpdatePwdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestUpdatePwdBuilder &operator=(const RequestUpdatePwdBuilder &);
  flatbuffers::Offset<RequestUpdatePwd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestUpdatePwd>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestUpdatePwd> CreateRequestUpdatePwd(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<swr::LoginUser> user = 0) {
  RequestUpdatePwdBuilder builder_(_fbb);
  builder_.add_user(user);
  return builder_.Finish();
}

struct RequestUserList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestUserListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY = 4
  };
  int32_t any() const {
    return GetField<int32_t>(VT_ANY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANY) &&
           verifier.EndTable();
  }
};

struct RequestUserListBuilder {
  typedef RequestUserList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any(int32_t any) {
    fbb_.AddElement<int32_t>(RequestUserList::VT_ANY, any, 0);
  }
  explicit RequestUserListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestUserListBuilder &operator=(const RequestUserListBuilder &);
  flatbuffers::Offset<RequestUserList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestUserList>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestUserList> CreateRequestUserList(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t any = 0) {
  RequestUserListBuilder builder_(_fbb);
  builder_.add_any(any);
  return builder_.Finish();
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_MESSAGE_TYPE = 6,
    VT_MESSAGE = 8
  };
  swr::RequestType type() const {
    return static_cast<swr::RequestType>(GetField<int8_t>(VT_TYPE, 0));
  }
  swr::RequestDataField message_type() const {
    return static_cast<swr::RequestDataField>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const swr::RequestSelfTest *message_as_RequestSelfTest() const {
    return message_type() == swr::RequestDataField_RequestSelfTest ? static_cast<const swr::RequestSelfTest *>(message()) : nullptr;
  }
  const swr::RequestHMI *message_as_RequestHMI() const {
    return message_type() == swr::RequestDataField_RequestHMI ? static_cast<const swr::RequestHMI *>(message()) : nullptr;
  }
  const swr::RequestCleanMode *message_as_RequestCleanMode() const {
    return message_type() == swr::RequestDataField_RequestCleanMode ? static_cast<const swr::RequestCleanMode *>(message()) : nullptr;
  }
  const swr::RequestManual *message_as_RequestManual() const {
    return message_type() == swr::RequestDataField_RequestManual ? static_cast<const swr::RequestManual *>(message()) : nullptr;
  }
  const swr::RequestVideo *message_as_RequestVideo() const {
    return message_type() == swr::RequestDataField_RequestVideo ? static_cast<const swr::RequestVideo *>(message()) : nullptr;
  }
  const swr::RequestScanQR *message_as_RequestScanQR() const {
    return message_type() == swr::RequestDataField_RequestScanQR ? static_cast<const swr::RequestScanQR *>(message()) : nullptr;
  }
  const swr::RequestTeachClean *message_as_RequestTeachClean() const {
    return message_type() == swr::RequestDataField_RequestTeachClean ? static_cast<const swr::RequestTeachClean *>(message()) : nullptr;
  }
  const swr::RequestAutoClean *message_as_RequestAutoClean() const {
    return message_type() == swr::RequestDataField_RequestAutoClean ? static_cast<const swr::RequestAutoClean *>(message()) : nullptr;
  }
  const swr::RequestAboutThisMachine *message_as_RequestAboutThisMachine() const {
    return message_type() == swr::RequestDataField_RequestAboutThisMachine ? static_cast<const swr::RequestAboutThisMachine *>(message()) : nullptr;
  }
  const swr::RequestOperationRecord *message_as_RequestOperationRecord() const {
    return message_type() == swr::RequestDataField_RequestOperationRecord ? static_cast<const swr::RequestOperationRecord *>(message()) : nullptr;
  }
  const swr::RequestEquipmentStatus *message_as_RequestEquipmentStatus() const {
    return message_type() == swr::RequestDataField_RequestEquipmentStatus ? static_cast<const swr::RequestEquipmentStatus *>(message()) : nullptr;
  }
  const swr::RequestSiteRoutes *message_as_RequestSiteRoutes() const {
    return message_type() == swr::RequestDataField_RequestSiteRoutes ? static_cast<const swr::RequestSiteRoutes *>(message()) : nullptr;
  }
  const swr::RequestDelRoute *message_as_RequestDelRoute() const {
    return message_type() == swr::RequestDataField_RequestDelRoute ? static_cast<const swr::RequestDelRoute *>(message()) : nullptr;
  }
  const swr::RequestTransSlot *message_as_RequestTransSlot() const {
    return message_type() == swr::RequestDataField_RequestTransSlot ? static_cast<const swr::RequestTransSlot *>(message()) : nullptr;
  }
  const swr::RequestDownloadRoute *message_as_RequestDownloadRoute() const {
    return message_type() == swr::RequestDataField_RequestDownloadRoute ? static_cast<const swr::RequestDownloadRoute *>(message()) : nullptr;
  }
  const swr::RequestVerifyPassword *message_as_RequestVerifyPassword() const {
    return message_type() == swr::RequestDataField_RequestVerifyPassword ? static_cast<const swr::RequestVerifyPassword *>(message()) : nullptr;
  }
  const swr::RequestMachineParams *message_as_RequestMachineParams() const {
    return message_type() == swr::RequestDataField_RequestMachineParams ? static_cast<const swr::RequestMachineParams *>(message()) : nullptr;
  }
  const swr::RequestEquipmentTesting *message_as_RequestEquipmentTesting() const {
    return message_type() == swr::RequestDataField_RequestEquipmentTesting ? static_cast<const swr::RequestEquipmentTesting *>(message()) : nullptr;
  }
  const swr::RequestEquipmentTestingItem *message_as_RequestEquipmentTestingItem() const {
    return message_type() == swr::RequestDataField_RequestEquipmentTestingItem ? static_cast<const swr::RequestEquipmentTestingItem *>(message()) : nullptr;
  }
  const swr::RequestFaultSetting *message_as_RequestFaultSetting() const {
    return message_type() == swr::RequestDataField_RequestFaultSetting ? static_cast<const swr::RequestFaultSetting *>(message()) : nullptr;
  }
  const swr::RequestWorkingMode *message_as_RequestWorkingMode() const {
    return message_type() == swr::RequestDataField_RequestWorkingMode ? static_cast<const swr::RequestWorkingMode *>(message()) : nullptr;
  }
  const swr::RequestWorkingHours *message_as_RequestWorkingHours() const {
    return message_type() == swr::RequestDataField_RequestWorkingHours ? static_cast<const swr::RequestWorkingHours *>(message()) : nullptr;
  }
  const swr::RequestChangePassword *message_as_RequestChangePassword() const {
    return message_type() == swr::RequestDataField_RequestChangePassword ? static_cast<const swr::RequestChangePassword *>(message()) : nullptr;
  }
  const swr::RequestSiteCode *message_as_RequestSiteCode() const {
    return message_type() == swr::RequestDataField_RequestSiteCode ? static_cast<const swr::RequestSiteCode *>(message()) : nullptr;
  }
  const swr::RequestSavingPower *message_as_RequestSavingPower() const {
    return message_type() == swr::RequestDataField_RequestSavingPower ? static_cast<const swr::RequestSavingPower *>(message()) : nullptr;
  }
  const swr::RequestStandby *message_as_RequestStandby() const {
    return message_type() == swr::RequestDataField_RequestStandby ? static_cast<const swr::RequestStandby *>(message()) : nullptr;
  }
  const swr::RequestOneButtonSwitch *message_as_RequestOneButtonSwitch() const {
    return message_type() == swr::RequestDataField_RequestOneButtonSwitch ? static_cast<const swr::RequestOneButtonSwitch *>(message()) : nullptr;
  }
  const swr::RequestPowerDown *message_as_RequestPowerDown() const {
    return message_type() == swr::RequestDataField_RequestPowerDown ? static_cast<const swr::RequestPowerDown *>(message()) : nullptr;
  }
  const swr::RequestMotionControl *message_as_RequestMotionControl() const {
    return message_type() == swr::RequestDataField_RequestMotionControl ? static_cast<const swr::RequestMotionControl *>(message()) : nullptr;
  }
  const swr::RequestSetVolume *message_as_RequestSetVolume() const {
    return message_type() == swr::RequestDataField_RequestSetVolume ? static_cast<const swr::RequestSetVolume *>(message()) : nullptr;
  }
  const swr::RequestGetVolume *message_as_RequestGetVolume() const {
    return message_type() == swr::RequestDataField_RequestGetVolume ? static_cast<const swr::RequestGetVolume *>(message()) : nullptr;
  }
  const swr::RequestEnableWifi *message_as_RequestEnableWifi() const {
    return message_type() == swr::RequestDataField_RequestEnableWifi ? static_cast<const swr::RequestEnableWifi *>(message()) : nullptr;
  }
  const swr::RequestFaultCode *message_as_RequestFaultCode() const {
    return message_type() == swr::RequestDataField_RequestFaultCode ? static_cast<const swr::RequestFaultCode *>(message()) : nullptr;
  }
  const swr::RequestAutoBorderRouteCleanWay *message_as_RequestAutoBorderRouteCleanWay() const {
    return message_type() == swr::RequestDataField_RequestAutoBorderRouteCleanWay ? static_cast<const swr::RequestAutoBorderRouteCleanWay *>(message()) : nullptr;
  }
  const swr::RequestGoHome *message_as_RequestGoHome() const {
    return message_type() == swr::RequestDataField_RequestGoHome ? static_cast<const swr::RequestGoHome *>(message()) : nullptr;
  }
  const swr::RequestResumeClean *message_as_RequestResumeClean() const {
    return message_type() == swr::RequestDataField_RequestResumeClean ? static_cast<const swr::RequestResumeClean *>(message()) : nullptr;
  }
  const swr::RequestSetBright *message_as_RequestSetBright() const {
    return message_type() == swr::RequestDataField_RequestSetBright ? static_cast<const swr::RequestSetBright *>(message()) : nullptr;
  }
  const swr::RequestGetBright *message_as_RequestGetBright() const {
    return message_type() == swr::RequestDataField_RequestGetBright ? static_cast<const swr::RequestGetBright *>(message()) : nullptr;
  }
  const swr::RequestGetVcuData *message_as_RequestGetVcuData() const {
    return message_type() == swr::RequestDataField_RequestGetVcuData ? static_cast<const swr::RequestGetVcuData *>(message()) : nullptr;
  }
  const swr::RequestSlamOptimize *message_as_RequestSlamOptimize() const {
    return message_type() == swr::RequestDataField_RequestSlamOptimize ? static_cast<const swr::RequestSlamOptimize *>(message()) : nullptr;
  }
  const swr::RequestTestConsumables *message_as_RequestTestConsumables() const {
    return message_type() == swr::RequestDataField_RequestTestConsumables ? static_cast<const swr::RequestTestConsumables *>(message()) : nullptr;
  }
  const swr::RequestCloseEquitment *message_as_RequestCloseEquitment() const {
    return message_type() == swr::RequestDataField_RequestCloseEquitment ? static_cast<const swr::RequestCloseEquitment *>(message()) : nullptr;
  }
  const swr::RequestExitStandby *message_as_RequestExitStandby() const {
    return message_type() == swr::RequestDataField_RequestExitStandby ? static_cast<const swr::RequestExitStandby *>(message()) : nullptr;
  }
  const swr::RequestUpdateExceptionConfig *message_as_RequestUpdateExceptionConfig() const {
    return message_type() == swr::RequestDataField_RequestUpdateExceptionConfig ? static_cast<const swr::RequestUpdateExceptionConfig *>(message()) : nullptr;
  }
  const swr::RequestLockState *message_as_RequestLockState() const {
    return message_type() == swr::RequestDataField_RequestLockState ? static_cast<const swr::RequestLockState *>(message()) : nullptr;
  }
  const swr::RequestLogin *message_as_RequestLogin() const {
    return message_type() == swr::RequestDataField_RequestLogin ? static_cast<const swr::RequestLogin *>(message()) : nullptr;
  }
  const swr::RequestUpdatePwd *message_as_RequestUpdatePwd() const {
    return message_type() == swr::RequestDataField_RequestUpdatePwd ? static_cast<const swr::RequestUpdatePwd *>(message()) : nullptr;
  }
  const swr::RequestUserList *message_as_RequestUserList() const {
    return message_type() == swr::RequestDataField_RequestUserList ? static_cast<const swr::RequestUserList *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyRequestDataField(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const swr::RequestSelfTest *Request::message_as<swr::RequestSelfTest>() const {
  return message_as_RequestSelfTest();
}

template<> inline const swr::RequestHMI *Request::message_as<swr::RequestHMI>() const {
  return message_as_RequestHMI();
}

template<> inline const swr::RequestCleanMode *Request::message_as<swr::RequestCleanMode>() const {
  return message_as_RequestCleanMode();
}

template<> inline const swr::RequestManual *Request::message_as<swr::RequestManual>() const {
  return message_as_RequestManual();
}

template<> inline const swr::RequestVideo *Request::message_as<swr::RequestVideo>() const {
  return message_as_RequestVideo();
}

template<> inline const swr::RequestScanQR *Request::message_as<swr::RequestScanQR>() const {
  return message_as_RequestScanQR();
}

template<> inline const swr::RequestTeachClean *Request::message_as<swr::RequestTeachClean>() const {
  return message_as_RequestTeachClean();
}

template<> inline const swr::RequestAutoClean *Request::message_as<swr::RequestAutoClean>() const {
  return message_as_RequestAutoClean();
}

template<> inline const swr::RequestAboutThisMachine *Request::message_as<swr::RequestAboutThisMachine>() const {
  return message_as_RequestAboutThisMachine();
}

template<> inline const swr::RequestOperationRecord *Request::message_as<swr::RequestOperationRecord>() const {
  return message_as_RequestOperationRecord();
}

template<> inline const swr::RequestEquipmentStatus *Request::message_as<swr::RequestEquipmentStatus>() const {
  return message_as_RequestEquipmentStatus();
}

template<> inline const swr::RequestSiteRoutes *Request::message_as<swr::RequestSiteRoutes>() const {
  return message_as_RequestSiteRoutes();
}

template<> inline const swr::RequestDelRoute *Request::message_as<swr::RequestDelRoute>() const {
  return message_as_RequestDelRoute();
}

template<> inline const swr::RequestTransSlot *Request::message_as<swr::RequestTransSlot>() const {
  return message_as_RequestTransSlot();
}

template<> inline const swr::RequestDownloadRoute *Request::message_as<swr::RequestDownloadRoute>() const {
  return message_as_RequestDownloadRoute();
}

template<> inline const swr::RequestVerifyPassword *Request::message_as<swr::RequestVerifyPassword>() const {
  return message_as_RequestVerifyPassword();
}

template<> inline const swr::RequestMachineParams *Request::message_as<swr::RequestMachineParams>() const {
  return message_as_RequestMachineParams();
}

template<> inline const swr::RequestEquipmentTesting *Request::message_as<swr::RequestEquipmentTesting>() const {
  return message_as_RequestEquipmentTesting();
}

template<> inline const swr::RequestEquipmentTestingItem *Request::message_as<swr::RequestEquipmentTestingItem>() const {
  return message_as_RequestEquipmentTestingItem();
}

template<> inline const swr::RequestFaultSetting *Request::message_as<swr::RequestFaultSetting>() const {
  return message_as_RequestFaultSetting();
}

template<> inline const swr::RequestWorkingMode *Request::message_as<swr::RequestWorkingMode>() const {
  return message_as_RequestWorkingMode();
}

template<> inline const swr::RequestWorkingHours *Request::message_as<swr::RequestWorkingHours>() const {
  return message_as_RequestWorkingHours();
}

template<> inline const swr::RequestChangePassword *Request::message_as<swr::RequestChangePassword>() const {
  return message_as_RequestChangePassword();
}

template<> inline const swr::RequestSiteCode *Request::message_as<swr::RequestSiteCode>() const {
  return message_as_RequestSiteCode();
}

template<> inline const swr::RequestSavingPower *Request::message_as<swr::RequestSavingPower>() const {
  return message_as_RequestSavingPower();
}

template<> inline const swr::RequestStandby *Request::message_as<swr::RequestStandby>() const {
  return message_as_RequestStandby();
}

template<> inline const swr::RequestOneButtonSwitch *Request::message_as<swr::RequestOneButtonSwitch>() const {
  return message_as_RequestOneButtonSwitch();
}

template<> inline const swr::RequestPowerDown *Request::message_as<swr::RequestPowerDown>() const {
  return message_as_RequestPowerDown();
}

template<> inline const swr::RequestMotionControl *Request::message_as<swr::RequestMotionControl>() const {
  return message_as_RequestMotionControl();
}

template<> inline const swr::RequestSetVolume *Request::message_as<swr::RequestSetVolume>() const {
  return message_as_RequestSetVolume();
}

template<> inline const swr::RequestGetVolume *Request::message_as<swr::RequestGetVolume>() const {
  return message_as_RequestGetVolume();
}

template<> inline const swr::RequestEnableWifi *Request::message_as<swr::RequestEnableWifi>() const {
  return message_as_RequestEnableWifi();
}

template<> inline const swr::RequestFaultCode *Request::message_as<swr::RequestFaultCode>() const {
  return message_as_RequestFaultCode();
}

template<> inline const swr::RequestAutoBorderRouteCleanWay *Request::message_as<swr::RequestAutoBorderRouteCleanWay>() const {
  return message_as_RequestAutoBorderRouteCleanWay();
}

template<> inline const swr::RequestGoHome *Request::message_as<swr::RequestGoHome>() const {
  return message_as_RequestGoHome();
}

template<> inline const swr::RequestResumeClean *Request::message_as<swr::RequestResumeClean>() const {
  return message_as_RequestResumeClean();
}

template<> inline const swr::RequestSetBright *Request::message_as<swr::RequestSetBright>() const {
  return message_as_RequestSetBright();
}

template<> inline const swr::RequestGetBright *Request::message_as<swr::RequestGetBright>() const {
  return message_as_RequestGetBright();
}

template<> inline const swr::RequestGetVcuData *Request::message_as<swr::RequestGetVcuData>() const {
  return message_as_RequestGetVcuData();
}

template<> inline const swr::RequestSlamOptimize *Request::message_as<swr::RequestSlamOptimize>() const {
  return message_as_RequestSlamOptimize();
}

template<> inline const swr::RequestTestConsumables *Request::message_as<swr::RequestTestConsumables>() const {
  return message_as_RequestTestConsumables();
}

template<> inline const swr::RequestCloseEquitment *Request::message_as<swr::RequestCloseEquitment>() const {
  return message_as_RequestCloseEquitment();
}

template<> inline const swr::RequestExitStandby *Request::message_as<swr::RequestExitStandby>() const {
  return message_as_RequestExitStandby();
}

template<> inline const swr::RequestUpdateExceptionConfig *Request::message_as<swr::RequestUpdateExceptionConfig>() const {
  return message_as_RequestUpdateExceptionConfig();
}

template<> inline const swr::RequestLockState *Request::message_as<swr::RequestLockState>() const {
  return message_as_RequestLockState();
}

template<> inline const swr::RequestLogin *Request::message_as<swr::RequestLogin>() const {
  return message_as_RequestLogin();
}

template<> inline const swr::RequestUpdatePwd *Request::message_as<swr::RequestUpdatePwd>() const {
  return message_as_RequestUpdatePwd();
}

template<> inline const swr::RequestUserList *Request::message_as<swr::RequestUserList>() const {
  return message_as_RequestUserList();
}

struct RequestBuilder {
  typedef Request Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(swr::RequestType type) {
    fbb_.AddElement<int8_t>(Request::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_message_type(swr::RequestDataField message_type) {
    fbb_.AddElement<uint8_t>(Request::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Request::VT_MESSAGE, message);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    swr::RequestType type = swr::RequestType_SelfTest,
    swr::RequestDataField message_type = swr::RequestDataField_NONE,
    flatbuffers::Offset<void> message = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyRequestDataField(flatbuffers::Verifier &verifier, const void *obj, RequestDataField type) {
  switch (type) {
    case RequestDataField_NONE: {
      return true;
    }
    case RequestDataField_RequestSelfTest: {
      auto ptr = reinterpret_cast<const swr::RequestSelfTest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestHMI: {
      auto ptr = reinterpret_cast<const swr::RequestHMI *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestCleanMode: {
      auto ptr = reinterpret_cast<const swr::RequestCleanMode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestManual: {
      auto ptr = reinterpret_cast<const swr::RequestManual *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestVideo: {
      auto ptr = reinterpret_cast<const swr::RequestVideo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestScanQR: {
      auto ptr = reinterpret_cast<const swr::RequestScanQR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestTeachClean: {
      auto ptr = reinterpret_cast<const swr::RequestTeachClean *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestAutoClean: {
      auto ptr = reinterpret_cast<const swr::RequestAutoClean *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestAboutThisMachine: {
      auto ptr = reinterpret_cast<const swr::RequestAboutThisMachine *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestOperationRecord: {
      auto ptr = reinterpret_cast<const swr::RequestOperationRecord *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestEquipmentStatus: {
      auto ptr = reinterpret_cast<const swr::RequestEquipmentStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestSiteRoutes: {
      auto ptr = reinterpret_cast<const swr::RequestSiteRoutes *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestDelRoute: {
      auto ptr = reinterpret_cast<const swr::RequestDelRoute *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestTransSlot: {
      auto ptr = reinterpret_cast<const swr::RequestTransSlot *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestDownloadRoute: {
      auto ptr = reinterpret_cast<const swr::RequestDownloadRoute *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestVerifyPassword: {
      auto ptr = reinterpret_cast<const swr::RequestVerifyPassword *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestMachineParams: {
      auto ptr = reinterpret_cast<const swr::RequestMachineParams *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestEquipmentTesting: {
      auto ptr = reinterpret_cast<const swr::RequestEquipmentTesting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestEquipmentTestingItem: {
      auto ptr = reinterpret_cast<const swr::RequestEquipmentTestingItem *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestFaultSetting: {
      auto ptr = reinterpret_cast<const swr::RequestFaultSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestWorkingMode: {
      auto ptr = reinterpret_cast<const swr::RequestWorkingMode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestWorkingHours: {
      auto ptr = reinterpret_cast<const swr::RequestWorkingHours *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestChangePassword: {
      auto ptr = reinterpret_cast<const swr::RequestChangePassword *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestSiteCode: {
      auto ptr = reinterpret_cast<const swr::RequestSiteCode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestSavingPower: {
      auto ptr = reinterpret_cast<const swr::RequestSavingPower *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestStandby: {
      auto ptr = reinterpret_cast<const swr::RequestStandby *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestOneButtonSwitch: {
      auto ptr = reinterpret_cast<const swr::RequestOneButtonSwitch *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestPowerDown: {
      auto ptr = reinterpret_cast<const swr::RequestPowerDown *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestMotionControl: {
      auto ptr = reinterpret_cast<const swr::RequestMotionControl *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestSetVolume: {
      auto ptr = reinterpret_cast<const swr::RequestSetVolume *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestGetVolume: {
      auto ptr = reinterpret_cast<const swr::RequestGetVolume *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestEnableWifi: {
      auto ptr = reinterpret_cast<const swr::RequestEnableWifi *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestFaultCode: {
      auto ptr = reinterpret_cast<const swr::RequestFaultCode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestAutoBorderRouteCleanWay: {
      auto ptr = reinterpret_cast<const swr::RequestAutoBorderRouteCleanWay *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestGoHome: {
      auto ptr = reinterpret_cast<const swr::RequestGoHome *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestResumeClean: {
      auto ptr = reinterpret_cast<const swr::RequestResumeClean *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestSetBright: {
      auto ptr = reinterpret_cast<const swr::RequestSetBright *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestGetBright: {
      auto ptr = reinterpret_cast<const swr::RequestGetBright *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestGetVcuData: {
      auto ptr = reinterpret_cast<const swr::RequestGetVcuData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestSlamOptimize: {
      auto ptr = reinterpret_cast<const swr::RequestSlamOptimize *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestTestConsumables: {
      auto ptr = reinterpret_cast<const swr::RequestTestConsumables *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestCloseEquitment: {
      auto ptr = reinterpret_cast<const swr::RequestCloseEquitment *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestExitStandby: {
      auto ptr = reinterpret_cast<const swr::RequestExitStandby *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestUpdateExceptionConfig: {
      auto ptr = reinterpret_cast<const swr::RequestUpdateExceptionConfig *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestLockState: {
      auto ptr = reinterpret_cast<const swr::RequestLockState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestLogin: {
      auto ptr = reinterpret_cast<const swr::RequestLogin *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestUpdatePwd: {
      auto ptr = reinterpret_cast<const swr::RequestUpdatePwd *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestDataField_RequestUserList: {
      auto ptr = reinterpret_cast<const swr::RequestUserList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyRequestDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequestDataField(
        verifier,  values->Get(i), types->GetEnum<RequestDataField>(i))) {
      return false;
    }
  }
  return true;
}

inline const swr::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<swr::Request>(buf);
}

inline const swr::Request *GetSizePrefixedRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<swr::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<swr::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<swr::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<swr::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<swr::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace swr

#endif  // FLATBUFFERS_GENERATED_REQUEST_SWR_H_
